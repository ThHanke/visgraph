@config "../tailwind.config.ts";
@import 'tailwindcss';

/* Theme tokens (keep variables as single source of truth for light/dark) */
:root {
  /* Core Background */
  --background: 210 20% 98%;
  --foreground: 215 25% 27%;
  /* Stable dark foreground token for bright-button text (keeps same value across themes) */
  --text-foreground-dark: 215 25% 27%;

  /* Surface Colors */
  --card: 0 0% 100%;
  --card-foreground: 215 25% 27%;
  --popover: 0 0% 100%;
  --popover-foreground: 215 25% 27%;

  /* Brand Colors */
  --primary: 250 55% 70%;
  --primary-foreground: 0 0% 100%;
  --primary-hover: 250 55% 65%;

  --secondary: 160 40% 85%;
  --secondary-foreground: 160 30% 25%;
  --secondary-hover: 160 40% 80%;

  --accent: 25 85% 85%;
  --accent-foreground: 25 40% 25%;
  --accent-hover: 25 85% 80%;

  --muted: 210 20% 95%;
  --muted-foreground: 215 15% 50%;

  --destructive: 350 70% 75%;
  --destructive-foreground: 0 0% 100%;

  --border: 210 15% 88%;
  --input: 210 15% 92%;
  --ring: 250 55% 70%;
  --radius: 0.75rem;

  /* Canvas tokens */
  /* Variant 3 (darker teal): stronger, darker teal background for lower perceived brightness */
  --canvas-bg: 172 50% 92%;
  --canvas-grid: 172 46% 88%;

  /* Node tokens */
  --node-bg: 0 0% 100%;
  --node-foreground: 215 25% 27%;
  --node-border: 210 15% 88%;
  --node-muted: 210 15% 92%;
  --node-shadow: 0 4px 20px hsla(215, 25%, 27%, 0.1);
  --node-leftbar-width: 8px;

  /* Edge tokens */
  --edge-default: 215 20% 60%;
  --edge-selected: 250 55% 60%;

  /* Glassmorphism / animation variables */
  --glass-shadow: 0 8px 32px hsla(215, 25%, 27%, 0.08);
  --transition-smooth: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.dark {
  --background: 215 30% 8%;
  --foreground: 210 20% 95%;
  --card: 215 25% 12%;
  --card-foreground: 210 20% 95%;
  --popover: 215 25% 12%;
  --popover-foreground: 210 20% 95%;
  --primary: 250 55% 65%;
  --primary-foreground: 0 0% 100%;
  --muted: 215 25% 15%;
  --muted-foreground: 215 15% 78%;
  --border: 215 18% 28%;
  --input: 215 20% 18%;
  --canvas-bg: 172 16% 6%;
  --canvas-grid: 172 14% 10%;
  --node-bg: 215 25% 12%;
  --node-foreground: 210 20% 95%;
  --node-border: 215 20% 20%;
  --node-muted: 215 25% 15%;
  --node-shadow: 0 4px 20px hsla(210,20%,8%,0.12);
}

/* Minimal base layer: keep only what is required globally */
@layer base {
  * {
    border-color: hsl(var(--border));
  }

  body {
    @reference bg-background text-foreground;
    font-family: 'Inter', system-ui, -apple-system, sans-serif;
  }

  /* Utility: explicit dark foreground for use on bright buttons / surfaces where text-foreground
     reads too light. This token intentionally does not change in .dark mode. */
  .text-foreground-dark { color: hsl(var(--text-foreground-dark)); }
}

/* Low-level React Flow rules that are structural / interaction-critical and
   not practical to move into component-level Tailwind classes. These are
   intentionally minimal: keep SVG overflow visible and ensure controls positioning. */

/* Allow custom edge paths to render outside the SVG box */
.react-flow__edges svg {
  overflow: visible;
  position: absolute;
}


/* Keep controls visible above canvas; UI layer should use Tailwind classes where possible */
.react-flow__controls {
  z-index: 60;
  position: absolute;
  left: 8px;
  bottom: 8px;
  pointer-events: auto;
}

/* Minimal handle defaults kept here to avoid breaking pointer behavior.
   Visual styles (color, size) should be applied via Tailwind classes on node renderers
   or via CSS variables on the node elements. */
.react-flow__handle {
  transition: var(--transition-smooth);
}

/* Keep node pseudo-element for left color bar as a fallback. When refactoring nodes

we recommend replacing this with an explicit child element so Tailwind classes can be used. */
.react-flow__node::before {
  content: "";
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  width: var(--node-leftbar-width);
  background: var(--node-leftbar-color, transparent);
  transition: background 0.2s ease;
}

/* Edge label renderer: keep transitions; let components control badge visuals (do not force solid styling here) */
.edge-label-renderer__custom-edge {
  position: absolute;
  transition: opacity 120ms linear, transform 120ms linear;
  will-change: opacity, transform;
}


.react-flow__node > * {
  background: hsl(var(--node-bg));
  color: hsl(var(--node-foreground));
  border-color: hsl(var(--node-border));
  box-shadow: var(--node-shadow);
}

/* Keep react-flow markers positioned */
.react-flow__marker {
  position: absolute;
}

/* Node badge helper: use the exact node-provided color (hex) via --node-color.
   The node renderer sets --node-color to the provided hex value so badges and left-bars
   reflect the node data exactly. Consumers that need derived tones should set additional
   CSS variables from JavaScript if required. */
.node-badge {
  background: var(--node-color, transparent);
  border: 1px solid var(--node-color, transparent);

  /* badge text color is set per-node with --node-badge-foreground (computed in JS) */
  color: var(--node-badge-foreground, hsl(var(--node-foreground)));
}

/* Namespace dot: use exact namespace color provided via --ns-color (hex), fallback to transparent.
   This ensures legend swatches match node colors exactly. */
[data-ns-dot] {
  background: var(--ns-color, transparent);
  border: 1px solid color-mix(in srgb, var(--ns-color) 20%, hsl(var(--border)));
}

/* Edge container fallback: allows using currentColor on SVG children for theme-aware strokes/fills */
.edge-container {
  color: hsl(var(--edge-default));
}


.react-flow__handle.connectionindicator {
	opacity: 0;
}
.react-flow__handle-left {
  opacity: 0;
}


.react-flow__controls-button {
	border: none;
	color:  hsl(var(--muted-foreground) / var(--tw-text-opacity, 1));
  border: 1px solid hsl(var(--border));
  border-bottom: 1px solid hsl(var(--background) / 1) !important;
  --tw-bg-opacity: 1;
  background-color: hsl(var(--muted) / var(--tw-bg-opacity, 1)) !important;
  }

.react-flow__minimap {
  border: 1px solid hsl(var(--border));

  background-color: hsl(var(--canvas-bg) / 1)  !important;;
  /* background-color: hsl(var(--muted) / var(--tw-bg-opacity, 1)) !important; */
}

.react-flow__panel.bottom {
	bottom: 50px !important;
}

.react-flow__attribution {
	visibility: hidden;
}