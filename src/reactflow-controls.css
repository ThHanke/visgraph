/* Minimal, non-destructive overrides for React Flow Controls
   Kept deliberately small and implemented as plain CSS (no @apply) so
   it doesn't depend on Tailwind processing and won't interfere with existing
   display-mode rules or project Tailwind setup.
*/

.react-flow__panel.react-flow__controls {
  /* card-like container */
  background: var(--card, #ffffff);
  border: 1px solid rgba(0,0,0,0.06);
  border-radius: 0.5rem;
  padding: 0.5rem;
  box-shadow: 0 6px 18px rgba(16,24,40,0.06);
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  z-index: 40; /* above canvas content */
}

/* Keep the vertical layout used by Controls */
.react-flow__panel.react-flow__controls.vertical {
  flex-direction: column;
}

/* Buttons adopt a compact, consistent hit area */
.react-flow__controls-button {
  width: 40px;
  height: 40px;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  background: transparent;
  color: var(--foreground, #111827);
  border-radius: 0.375rem;
  border: none;
  padding: 4px;
  cursor: pointer;
  transition: background-color 150ms linear, color 150ms linear;
}

/* subtle hover/focus state */
.react-flow__controls-button:hover,
.react-flow__controls-button:focus {
  background: rgba(2,6,23,0.04);
  outline: none;
}

/* pressed/active visual for the interactive toggle */
.react-flow__controls-button[aria-pressed="true"] {
  background: rgba(59,130,246,0.12); /* subtle accent */
  color: rgb(59,130,246);
}

/* icon sizing */
.react-flow__controls-button svg {
  width: 16px;
  height: 16px;
  fill: currentColor;
}

/* ensure it doesn't get clipped on small viewports */
.react-flow__panel.react-flow__controls.bottom.left {
  left: 12px;
  bottom: 12px;
}

/* larger touch targets on coarse pointers */
@media (pointer: coarse) {
  .react-flow__controls-button {
    width: 48px;
    height: 48px;
  }
}

/* ---------------------------------------------------------------------------
   Project-specific React Flow cursor / handle tweaks to make node interaction
   clearer and avoid persistent "grab" cursor on node bodies which can confuse
   users into thinking the whole node is a drag handle.
   - Keep node body cursor neutral by default
   - Make handles show pointer / connection cursor and increase hit area
   - Provide a small visible hover cue for handles so they're discoverable
   --------------------------------------------------------------------------- */

/* Scope changes to the app canvas so these overrides are local and safe */
.knowledge-graph-canvas .react-flow__node.draggable {
  cursor: default; /* don't show grab cursor for whole node body */
}

/* Prefer showing pointer on handles so users can spot where to start a connection.
   Use !important sparingly to overcome inline utility classes that may set
   pointer-events or transparency. */
.knowledge-graph-canvas .react-flow__handle {
  cursor: pointer !important;
  width: 100%;
  height: 100%;
  background: #00f;
  position: absolute;
  top: 0;
  left: 0;
  border-radius: 0;
  transform: none;
  border: none;
  opacity: 0;
}

/* Slightly enlarge and highlight handle on node hover to make it discoverable */
.knowledge-graph-canvas .react-flow__node:hover .react-flow__handle {
  transform: scale(1.2);
  background: rgba(34,34,34,0.08);
  opacity: 1 !important;
}

/* Make sure connection-in-progress indicator remains obvious */
.knowledge-graph-canvas .react-flow__handle.connectionindicator {
  background: rgba(34,34,34,0.14) !important;
  border-color: rgba(34,34,34,0.2) !important;
}

/* Optional: extend clickable area without visually changing layout by using a pseudo element.
   This makes it easier to start a drag without changing node visuals. */
.knowledge-graph-canvas .react-flow__handle::after {
  content: "";
  position: absolute;
  left: -6px;
  top: -6px;
  right: -6px;
  bottom: -6px;
  border-radius: inherit;
  pointer-events: none; /* leave events to the handle itself */
}

.react-flow__attribution {
  visibility: hidden;
}

/* For touch devices prefer larger handles */
@media (pointer: coarse) {
  .knowledge-graph-canvas .react-flow__handle {
    width: 20px !important;
    height: 20px !important;
  }
}
