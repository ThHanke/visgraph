/* Minimal, non-destructive overrides for React Flow Controls
   Kept deliberately small and implemented as plain CSS (no @apply) so
   it doesn't depend on Tailwind processing and won't interfere with existing
   display-mode rules or project Tailwind setup.
*/

.react-flow__panel.react-flow__controls {
  /* card-like container */
  background: var(--card, #ffffff);
  border: 1px solid rgba(0,0,0,0.06);
  border-radius: 0.5rem;
  padding: 0.5rem;
  box-shadow: 0 6px 18px rgba(16,24,40,0.06);
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  z-index: 40; /* above canvas content */
}

/* Keep the vertical layout used by Controls */
.react-flow__panel.react-flow__controls.vertical {
  flex-direction: column;
}

/* Buttons adopt a compact, consistent hit area */
.react-flow__controls-button {
  width: 40px;
  height: 40px;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  background: transparent;
  color: var(--foreground, #111827);
  border-radius: 0.375rem;
  border: none;
  padding: 4px;
  cursor: pointer;
  transition: background-color 150ms linear, color 150ms linear;
}

/* subtle hover/focus state */
.react-flow__controls-button:hover,
.react-flow__controls-button:focus {
  background: rgba(2,6,23,0.04);
  outline: none;
}

/* pressed/active visual for the interactive toggle */
.react-flow__controls-button[aria-pressed="true"] {
  background: rgba(59,130,246,0.12); /* subtle accent */
  color: rgb(59,130,246);
}

/* icon sizing */
.react-flow__controls-button svg {
  width: 16px;
  height: 16px;
  fill: currentColor;
}

/* ensure it doesn't get clipped on small viewports */
.react-flow__panel.react-flow__controls.bottom.left {
  left: 12px;
  bottom: 12px;
}

/* larger touch targets on coarse pointers */
@media (pointer: coarse) {
  .react-flow__controls-button {
    width: 48px;
    height: 48px;
  }
}
