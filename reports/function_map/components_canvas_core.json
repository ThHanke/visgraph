{
  "directory": "src/components/Canvas/core",
  "generatedAt": "2025-09-13T08:26:16+02:00",
  "files": {
    "TemplateManager.ts": {
      "file": "src/components/Canvas/core/TemplateManager.ts",
      "exports": [
        "TemplateManager",
        "default"
      ],
      "functions": [
        {
          "name": "TemplateManager (class)",
          "signature": "constructor(nodeConfig?: Partial<NodeTemplateConfig>, linkConfig?: Partial<LinkTemplateConfig>)",
          "description": "Lightweight stub preserving TemplateManager API for tests and callers. Holds node/link default styling configuration and exposes computeDisplayType which delegates to nodeDisplay.computeDisplayInfo via the ontology store's RDF manager. createNodeTemplate and createLinkTemplate return null (React Flow renders nodes)."
        },
        {
          "name": "computeDisplayType",
          "signature": "computeDisplayType(data: any): string",
          "description": "Compute a display type string for a node payload by using the ontology store's rdfManager and nodeDisplay helpers. Returns prefixed or short label or empty string on failure."
        }
      ],
      "notes": "This file is intentionally a stub to avoid heavy dependencies while preserving API compatibility for tests and existing code."
    },
    "nodeDisplay.ts": {
      "file": "src/components/Canvas/core/nodeDisplay.ts",
      "exports": [
        "computeDisplayInfo",
        "computeBadgeText",
        "shortLocalName",
        "pickMeaningfulType"
      ],
      "functions": [
        {
          "name": "computeDisplayInfo",
          "signature": "computeDisplayInfo(canonicalNode, rdfManager?, _availableClasses?) => DisplayInfo",
          "description": "Strict helper to compute display info for a node. Picks the first non-owl:NamedIndividual rdf:type, resolves it (requires rdfManager) and returns canonical URI, prefixed form, short name, namespace and tooltip lines. Throws when resolution cannot be performed (no silent fallback)."
        },
        {
          "name": "computeBadgeText",
          "signature": "computeBadgeText(canonicalNode, rdfManager?, _availableClasses?) => string",
          "description": "Compute single-line badge text for a node (prefixed form or short local name). Requires rdfManager when prefixed/full IRIs are present."
        },
        {
          "name": "pickMeaningfulType",
          "signature": "pickMeaningfulType(types?: string[]) => string | undefined",
          "description": "Return first rdf:type candidate that isn't an owl:NamedIndividual marker."
        },
        {
          "name": "shortLocalName",
          "signature": "shortLocalName(uriOrPrefixed?: string) => string",
          "description": "Wrapper around utils/termDisplay.shortLocalName for UI usage."
        }
      ],
      "notes": "This module intentionally uses strict prefix resolution via utils/termDisplay and surfaces errors when prefixes are missing. Duplication candidates: logic for selecting meaningful rdf:type and prefix expansion is present across stores and utils; centralize into a single utility to reduce duplication."
    },
    "DiagramManager.ts": {
      "file": "src/components/Canvas/core/DiagramManager.ts",
      "exports": [
        "DiagramManager",
        "default"
      ],
      "functions": [
        {
          "name": "DiagramManager (class)",
          "signature": "constructor(container?: HTMLElement | null, config?: DiagramConfig, handlers?: Partial<DiagramEventHandlers>)",
          "description": "Stub implementation preserving DiagramManager API. Stores container/config/handlers and provides `createDiagram` which returns a mock diagram object implementing a minimal subset of the previous diagram API (startTransaction/commitTransaction, model node/link arrays, listeners, layout hooks, dispose). Other methods are simple setters or no-ops."
        },
        {
          "name": "createDiagram",
          "signature": "() => any",
          "description": "Return a minimal placeholder diagram object used by callers expecting a diagram-like API. Methods are no-ops; intended to avoid importing heavier diagramming libs in tests."
        },
        {
          "name": "setConfig / setEventHandlers / teardown",
          "signature": "setConfig(cfg: DiagramConfig) / setEventHandlers(handlers) / teardown()",
          "description": "Simple state update and teardown no-op helpers to maintain API compatibility."
        }
      ],
      "notes": "Stub keeps the repo free of heavy diagram library dependencies while preserving runtime/test compatibility for modules importing DiagramManager."
    },
    "EventHandlers.ts": {
      "file": "src/components/Canvas/core/EventHandlers.ts",
      "exports": [
        "EventHandlerManager",
        "default"
      ],
      "functions": [
        {
          "name": "EventHandlerManager (class)",
          "signature": "constructor(handlers?: Partial<DiagramEventHandlers>)",
          "description": "Stub manager that preserves the former EventHandlerManager API. Stores handlers and exposes setupEventHandlers, updateEventHandlers, and teardown â€” all implemented as no-ops or simple state merges to avoid requiring the original diagram runtime."
        },
        {
          "name": "setupEventHandlers / updateEventHandlers / teardown",
          "signature": "(diagram:any) => void / (newHandlers) => void / () => void",
          "description": "No-op methods that keep the surface expected by callers; updateEventHandlers merges in new handlers into internal state."
        }
      ],
      "notes": "This module intentionally performs no runtime wiring; React Flow now handles events. These stubs prevent breaking imports and simplify testing."
    }
  },
  "global_notes": [
    "Scanned core Canvas modules TemplateManager, nodeDisplay, DiagramManager and EventHandlers. The first two provide strict display resolution using utils/termDisplay; the latter two are lightweight stubs preserving API compatibility.",
    "Duplication observations:",
    "- Prefix / prefix-expansion appears across core and utils. Consider centralizing expansion/shortening in utils/termDisplay and using rdfManager only for namespace maps.",
    "- Several normalization helpers (pickMeaningfulType, createSafeId, node shaping) appear in multiple places (rdfParser, rdfManager, ontologyStore). Centralize canonical node shaping logic to reduce maintenance burden."
  ]
}
