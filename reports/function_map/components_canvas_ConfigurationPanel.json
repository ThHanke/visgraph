{
  "directory": "src/components/Canvas",
  "generatedAt": "2025-09-13T08:37:49+02:00",
  "file": "src/components/Canvas/ConfigurationPanel.tsx",
  "exports": [
    "ConfigurationPanel",
    "ConfigurationPanelProps"
  ],
  "component_summary": {
    "name": "ConfigurationPanel",
    "type": "React.FC",
    "description": "Dialog-based configuration UI allowing users to manage layout, UI preferences, performance settings, blacklist and import/export app configuration. Integrates with appConfigStore and ontologyStore and provides several convenience UIs such as RecentOntologiesDisplay."
  },
  "top_level_parts": [
    {
      "name": "RecentOntologiesDisplay (inner)",
      "description": "Renders combined list of loaded and recent ontologies; supports adding/removing them to/from auto-load via appConfigStore actions."
    },
    {
      "name": "Tabs: layout / ui / performance / advanced",
      "description": "Organizes settings into logical groups: layout (current layout, animations, recent layouts), UI (theme, legend), performance (auto reasoning, max visible nodes, auto-load ontologies), advanced (blacklist controls, import/export)."
    },
    {
      "name": "Blacklist UI",
      "description": "Local state for blacklist editing (prefixes and URIs), applies changes to appConfigStore and calls rdfManager.setBlacklist to propagate runtime settings."
    },
    {
      "name": "Import/Export",
      "description": "Export config to clipboard and import JSON into store with validation. Reset defaults provided."
    }
  ],
  "notes": [
    "ConfigurationPanel centralizes user-facing config controls and persists them into appConfigStore. Blacklist changes also call rdfManager.setBlacklist directly to propagate runtime filters.",
    "Duplication candidates: normalization utilities for namespaces and URI keys are implemented in the component and elsewhere (CanvasToolbar). Consider extracting normalization helpers to utils to reuse across UI components."
  ]
}
