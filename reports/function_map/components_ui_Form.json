{
  "directory": "src/components/ui",
  "generatedAt": "2025-09-13T09:05:30+02:00",
  "file": "src/components/ui/form.tsx",
  "exports": [
    "FormItem",
    "FormLabel",
    "FormControl",
    "FormDescription",
    "FormMessage",
    "FormField"
  ],
  "component_summary": {
    "name": "Form primitives",
    "type": "React components (forwardRef)",
    "description": "Presentation-level form primitives that integrate with contextual form helpers (FormField, FormItemContext, useFormField) exported from formHelpers. These components provide accessible labels, controls with aria attributes, descriptions and error messages wired to react-hook-form state via useFormField."
  },
  "components": [
    {
      "name": "FormItem",
      "signature": "FormItem: React.forwardRef<HTMLDivElement>",
      "description": "Provides a unique id via FormItemContext and wraps form item content; used as a field container."
    },
    {
      "name": "FormLabel",
      "signature": "FormLabel: React.forwardRef",
      "description": "Renders a Label bound to the field id; applies destructive styling when the field has an error (via useFormField)."
    },
    {
      "name": "FormControl",
      "signature": "FormControl: React.forwardRef",
      "description": "Slot wrapper that supplies the form item id and aria-describedby attributes for description/message. Integrates with useFormField to set aria-invalid and referenced ids."
    },
    {
      "name": "FormDescription",
      "signature": "FormDescription: React.forwardRef",
      "description": "Renders the descriptive paragraph for a form field using the id from useFormField."
    },
    {
      "name": "FormMessage",
      "signature": "FormMessage: React.forwardRef",
      "description": "Renders validation message when field error exists; hides when no body/content."
    }
  ],
  "notes": [
    "This file intentionally keeps only React components and delegates context/hooks to formHelpers.tsx to avoid non-component exports causing react-refresh warnings.",
    "Duplication risk is low; the important shared logic resides in formHelpers (react-hook-form integration).",
    "Consumers should use the paired helpers from formHelpers (Form, FormField, useFormField) to ensure proper wiring."
  ]
}
