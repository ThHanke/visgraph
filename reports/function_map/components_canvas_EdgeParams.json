{
  "directory": "src/components/Canvas",
  "generatedAt": "2025-09-13T08:06:51+02:00",
  "file": "src/components/Canvas/EdgeParams.tsx",
  "exports": [
    "getEdgeParams",
    "initialElements"
  ],
  "functions": [
    {
      "name": "getNodeIntersection",
      "exported": false,
      "signature": "getNodeIntersection(intersectionNode, targetNode): { x: number; y: number }",
      "description": "Compute the intersection point on the boundary of intersectionNode facing targetNode. Uses node measured width/height and absolute positions to calculate the boundary intersection based on an ellipse approximation."
    },
    {
      "name": "getEdgePosition",
      "exported": false,
      "signature": "getEdgePosition(node, intersectionPoint): Position",
      "description": "Given a node and an intersection point, return which side of the node the point lies on (Top, Right, Bottom, Left) using rounded coordinate comparisons. Falls back to Top."
    },
    {
      "name": "getEdgeParams",
      "exported": true,
      "signature": "getEdgeParams(source, target): { sx, sy, tx, ty, sourcePos, targetPos }",
      "description": "Compute parameters needed to create a floating edge between two nodes: source/target intersection coordinates and the side positions for source and target (Position enum). Uses getNodeIntersection and getEdgePosition internally."
    },
    {
      "name": "initialElements",
      "exported": true,
      "signature": "initialElements(): { nodes: any[], edges: any[] }",
      "description": "Return a simple demo set of nodes and edges arranged in a circle around a center target. Useful for playground / demo visuals. Creates 8 sources and connects them to a central target using floating edge markers."
    }
  ],
  "notes": "Geometry helpers assume measured width/height (node.measured) and internals.positionAbsolute are available on node objects (set by layout/measurement)."
}
