{
  "generatedAt": "2025-09-23T16:57:08.865Z",
  "note": "Generated by scripts/generate_call_graph_ts_morph.js â€” ts-morph-based mapping (symbol resolution). This remains conservative and may still include unknown/ambiguous entries.",
  "functions": [
    {
      "name": "useAppConfigStore",
      "definedIn": [
        "src/App.tsx",
        "src/components/Canvas/CanvasToolbar.tsx",
        "src/components/Canvas/ConfigurationPanel.tsx",
        "src/components/Canvas/KnowledgeCanvas.tsx"
      ],
      "role": "",
      "callSites": [
        "src/App.tsx:undefined:undefined",
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "useEffect",
      "definedIn": [
        "node_modules/@types/react/index.d.ts",
        "src/App.tsx",
        "src/components/Canvas/ConfigurationPanel.tsx",
        "src/components/Canvas/CustomOntologyNode.tsx",
        "src/components/Canvas/KnowledgeCanvas.tsx",
        "src/components/Canvas/LinkPropertyEditor.tsx",
        "src/components/Canvas/NodePropertyEditor.tsx",
        "src/components/Canvas/ResizableNamespaceLegend.tsx",
        "src/components/Canvas/core/namespacePalette.ts",
        "src/components/ui/AutoComplete.tsx",
        "src/pages/NotFound.tsx"
      ],
      "role": "",
      "callSites": [
        "src/App.tsx:undefined:undefined",
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined",
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/LinkPropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined",
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined",
        "src/components/ui/AutoComplete.tsx:undefined:undefined",
        "src/components/ui/carousel.tsx:undefined:undefined",
        "src/components/ui/sidebar.tsx:undefined:undefined",
        "src/hooks/use-mobile.tsx:undefined:undefined",
        "src/hooks/use-toast.ts:undefined:undefined",
        "src/pages/NotFound.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setTheme",
      "definedIn": [
        "src/App.tsx",
        "src/utils/theme.ts"
      ],
      "role": "",
      "callSites": [
        "src/App.tsx:undefined:undefined"
      ]
    },
    {
      "name": "initTheme",
      "definedIn": [
        "src/main.tsx",
        "src/utils/theme.ts"
      ],
      "role": "",
      "callSites": [
        "src/main.tsx:undefined:undefined"
      ]
    },
    {
      "name": "isArray",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/KnowledgeCanvas.preserve.test.tsx:undefined:undefined",
        "src/__tests__/components/SpecimenCanvasMapping.test.ts:undefined:undefined",
        "src/__tests__/components/SpecimenGoNode.test.ts:undefined:undefined",
        "src/__tests__/debug/load_additional_debug.test.ts:undefined:undefined",
        "src/__tests__/e2e/reactflow_edge_persistence.unit.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.loadOntologyRdf.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.test.ts:undefined:undefined",
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined",
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/LayoutManager.ts:undefined:undefined",
        "src/components/Canvas/LinkPropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/core/mappingHelpers.ts:undefined:undefined",
        "src/components/Canvas/core/nodeDisplay.ts:undefined:undefined",
        "src/components/Canvas/helpers/diagramHelpers.ts:undefined:undefined",
        "src/components/Canvas/helpers/graphMappingHelpers.ts:undefined:undefined",
        "src/components/Canvas/helpers/nodePropertyHelpers.ts:undefined:undefined",
        "src/main.tsx:undefined:undefined",
        "src/stores/appConfigStore.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/stores/reasoningStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/startupDebug.ts:undefined:undefined",
        "src/utils/termUtils.ts:undefined:undefined"
      ]
    },
    {
      "name": "setBlacklist",
      "definedIn": [
        "src/utils/rdfManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined",
        "src/main.tsx:undefined:undefined"
      ]
    },
    {
      "name": "render",
      "definedIn": [
        "node_modules/@types/react-dom/client.d.ts",
        "src/__tests__/components/AutoComplete.ontology.test.tsx",
        "src/__tests__/components/CanvasToolbar.pasteRdf.test.tsx",
        "src/__tests__/components/KnowledgeCanvas.autoload.test.tsx",
        "src/__tests__/components/KnowledgeCanvas.preserve.test.tsx",
        "src/__tests__/components/NodePropertyEditor.resolveType.test.tsx",
        "src/__tests__/components/NodePropertyEditor.test.tsx",
        "src/__tests__/components/delete_node_and_edge.test.tsx",
        "src/__tests__/startupUrlQueryParam.test.tsx",
        "src/__tests__/stores/ontologyStore.fatmap.test.tsx"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/AutoComplete.ontology.test.tsx:undefined:undefined",
        "src/__tests__/components/CanvasToolbar.pasteRdf.test.tsx:undefined:undefined",
        "src/__tests__/components/KnowledgeCanvas.autoload.test.tsx:undefined:undefined",
        "src/__tests__/components/KnowledgeCanvas.preserve.test.tsx:undefined:undefined",
        "src/__tests__/components/NodePropertyEditor.resolveType.test.tsx:undefined:undefined",
        "src/__tests__/components/NodePropertyEditor.test.tsx:undefined:undefined",
        "src/__tests__/components/delete_node_and_edge.test.tsx:undefined:undefined",
        "src/__tests__/startupUrlQueryParam.test.tsx:undefined:undefined",
        "src/__tests__/stores/ontologyStore.fatmap.test.tsx:undefined:undefined",
        "src/main.tsx:undefined:undefined"
      ]
    },
    {
      "name": "createRoot",
      "definedIn": [
        "src/main.tsx"
      ],
      "role": "",
      "callSites": [
        "src/main.tsx:undefined:undefined"
      ]
    },
    {
      "name": "getElementById",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/main.tsx:undefined:undefined"
      ]
    },
    {
      "name": "SimpleDOMMatrixReadOnly",
      "definedIn": [
        "src/test-setup.ts"
      ],
      "role": "",
      "callSites": []
    },
    {
      "name": "trim",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined",
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/FloatingEdge.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined",
        "src/components/Canvas/core/edgeLabel.ts:undefined:undefined",
        "src/components/Canvas/core/mappingHelpers.ts:undefined:undefined",
        "src/components/ui/AutoComplete.tsx:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/stores/reasoningStore.ts:undefined:undefined",
        "src/test-setup.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined",
        "src/utils/termUtils.ts:undefined:undefined"
      ]
    },
    {
      "name": "String",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/callgraph/duplicate-calls.test.ts:undefined:undefined",
        "src/__tests__/components/SpecimenCanvasMapping.test.ts:undefined:undefined",
        "src/__tests__/components/SpecimenGoNode.test.ts:undefined:undefined",
        "src/__tests__/components/delete_node_and_edge.test.tsx:undefined:undefined",
        "src/__tests__/debug/load_additional_debug.test.ts:undefined:undefined",
        "src/__tests__/e2e/demo_flow_single_triple_change.test.ts:undefined:undefined",
        "src/__tests__/startupUrlQueryParam.test.tsx:undefined:undefined",
        "src/__tests__/stores/ontologyStore.remove.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfManager.applyParsedNodes.absoluteIri.test.ts:undefined:undefined",
        "src/__tests__/utils/rdfParser.test.ts:undefined:undefined",
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined",
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/FloatingEdge.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/LinkPropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/NamespaceLegendCore.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined",
        "src/components/Canvas/core/edgeHelpers.ts:undefined:undefined",
        "src/components/Canvas/core/edgeLabel.ts:undefined:undefined",
        "src/components/Canvas/core/mappingHelpers.ts:undefined:undefined",
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined",
        "src/components/Canvas/core/nodeDisplay.ts:undefined:undefined",
        "src/components/Canvas/helpers/diagramHelpers.ts:undefined:undefined",
        "src/components/Canvas/helpers/namespaceHelpers.ts:undefined:undefined",
        "src/components/Canvas/helpers/nodePropertyHelpers.ts:undefined:undefined",
        "src/components/Canvas/helpers/paletteHelpers.ts:undefined:undefined",
        "src/components/ui/AutoComplete.tsx:undefined:undefined",
        "src/components/ui/form.tsx:undefined:undefined",
        "src/hooks/useCanvasState.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/stores/reasoningStore.ts:undefined:undefined",
        "src/stores/settingsStore.ts:undefined:undefined",
        "src/test-setup.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined",
        "src/utils/startupDebug.ts:undefined:undefined",
        "src/utils/termUtils.ts:undefined:undefined"
      ]
    },
    {
      "name": "match",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/core/mappingHelpers.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/test-setup.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined",
        "src/utils/startupDebug.ts:undefined:undefined"
      ]
    },
    {
      "name": "filter",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/AnnotationPropertyDialog.tsx:undefined:undefined",
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined",
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/core/mappingHelpers.ts:undefined:undefined",
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined",
        "src/components/Canvas/core/nodeDisplay.ts:undefined:undefined",
        "src/components/ui/AutoComplete.tsx:undefined:undefined",
        "src/components/ui/EntityAutocomplete.tsx:undefined:undefined",
        "src/components/ui/chart.tsx:undefined:undefined",
        "src/hooks/use-toast.ts:undefined:undefined",
        "src/stores/appConfigStore.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/stores/reasoningStore.ts:undefined:undefined",
        "src/stores/settingsStore.ts:undefined:undefined",
        "src/test-setup.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined",
        "src/utils/startupDebug.ts:undefined:undefined",
        "src/utils/termUtils.ts:undefined:undefined"
      ]
    },
    {
      "name": "map",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/debug/load_additional_debug.test.ts:undefined:undefined",
        "src/__tests__/e2e/demo_flow_single_triple_change.test.ts:undefined:undefined",
        "src/__tests__/stores/completeRdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.graphPreservation.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfWorkflow.test.ts:undefined:undefined",
        "src/components/Canvas/AnnotationPropertyDialog.tsx:undefined:undefined",
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined",
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/LinkPropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/NamespaceLegendCore.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/ReasoningReportModal.tsx:undefined:undefined",
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined",
        "src/components/Canvas/core/mappingHelpers.ts:undefined:undefined",
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined",
        "src/components/Canvas/core/nodeDisplay.ts:undefined:undefined",
        "src/components/Canvas/layout/dagreLayout.ts:undefined:undefined",
        "src/components/ui/AutoComplete.tsx:undefined:undefined",
        "src/components/ui/EntityAutocomplete.tsx:undefined:undefined",
        "src/components/ui/chart.tsx:undefined:undefined",
        "src/hooks/use-toast.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/stores/settingsStore.ts:undefined:undefined",
        "src/test-setup.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined",
        "src/utils/wellKnownOntologies.ts:undefined:undefined"
      ]
    },
    {
      "name": "split",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/startupUrlQueryParam.test.tsx:undefined:undefined",
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined",
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined",
        "src/components/Canvas/helpers/diagramHelpers.ts:undefined:undefined",
        "src/components/Canvas/helpers/paletteHelpers.ts:undefined:undefined",
        "src/components/ui/EntityAutocomplete.tsx:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/test-setup.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined",
        "src/utils/startupDebug.ts:undefined:undefined",
        "src/utils/termUtils.ts:undefined:undefined"
      ]
    },
    {
      "name": "parseFloat",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/test-setup.ts:undefined:undefined"
      ]
    },
    {
      "name": "isNaN",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es2015.core.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/test-setup.ts:undefined:undefined"
      ]
    },
    {
      "name": "test",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts",
        "src/__tests__/callgraph/duplicate-calls.test.ts",
        "src/__tests__/components/CanvasToolbar.pasteRdf.test.tsx",
        "src/__tests__/components/KnowledgeCanvas.autoload.test.tsx",
        "src/__tests__/components/KnowledgeCanvas.preserve.test.tsx",
        "src/__tests__/e2e/reactflow_edge_persistence.unit.test.ts",
        "src/__tests__/startupUrlQueryParam.test.tsx",
        "src/__tests__/stores/ontologyStore.remove.test.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/callgraph/duplicate-calls.test.ts:undefined:undefined",
        "src/__tests__/components/CanvasToolbar.pasteRdf.test.tsx:undefined:undefined",
        "src/__tests__/components/KnowledgeCanvas.autoload.test.tsx:undefined:undefined",
        "src/__tests__/components/KnowledgeCanvas.preserve.test.tsx:undefined:undefined",
        "src/__tests__/e2e/reactflow_edge_persistence.unit.test.ts:undefined:undefined",
        "src/__tests__/startupUrlQueryParam.test.tsx:undefined:undefined",
        "src/__tests__/stores/demoDataLoad.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.remove.test.ts:undefined:undefined",
        "src/__tests__/utils/graphExporter.test.ts:undefined:undefined",
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined",
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined",
        "src/components/Canvas/core/mappingHelpers.ts:undefined:undefined",
        "src/components/Canvas/core/nodeDisplay.ts:undefined:undefined",
        "src/components/ui/EntityAutocomplete.tsx:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/stores/reasoningStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "encodeURIComponent",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/delete_node_and_edge.test.tsx:undefined:undefined",
        "src/__tests__/e2e/reactflow_edge_persistence.unit.test.ts:undefined:undefined",
        "src/__tests__/startupUrlQueryParam.test.tsx:undefined:undefined",
        "src/components/Canvas/core/edgeHelpers.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "replaceState",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/startupUrlQueryParam.test.tsx:undefined:undefined"
      ]
    },
    {
      "name": "getState",
      "definedIn": [
        "node_modules/zustand/vanilla.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/callgraph/duplicate-calls.test.ts:undefined:undefined",
        "src/__tests__/components/AutoComplete.ontology.test.tsx:undefined:undefined",
        "src/__tests__/components/NodePropertyEditor.resolveType.test.tsx:undefined:undefined",
        "src/__tests__/debug/load_additional_debug.test.ts:undefined:undefined",
        "src/__tests__/e2e/demo_flow_single_triple_change.test.ts:undefined:undefined",
        "src/__tests__/e2e/reactflow_edge_persistence.test.ts:undefined:undefined",
        "src/__tests__/e2e/reactflow_edge_persistence.unit.test.ts:undefined:undefined",
        "src/__tests__/startupUrlQueryParam.test.tsx:undefined:undefined",
        "src/__tests__/stores/completeRdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/stores/demoDataLoad.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.autoloadDisabled.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.entityPreservation.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.fatmap.test.tsx:undefined:undefined",
        "src/__tests__/stores/ontologyStore.graphPreservation.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.iofFetch.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.loadOntologyRdf.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.remove.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.urlFormatDetection.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/utils/graphExporter.test.ts:undefined:undefined",
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/LinkPropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/core/TemplateManager.ts:undefined:undefined",
        "src/components/ui/AutoComplete.tsx:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "fn",
      "definedIn": [
        "node_modules/vitest/dist/index.d.ts",
        "src/utils/startupDebug.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/CanvasToolbar.pasteRdf.test.tsx:undefined:undefined",
        "src/__tests__/components/NodePropertyEditor.test.tsx:undefined:undefined",
        "src/__tests__/startupUrlQueryParam.test.tsx:undefined:undefined",
        "src/__tests__/stores/ontologyStore.iofFetch.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.urlFormatDetection.test.ts:undefined:undefined",
        "src/utils/startupDebug.ts:undefined:undefined"
      ]
    },
    {
      "name": "setState",
      "definedIn": [
        "node_modules/zustand/vanilla.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/CanvasToolbar.pasteRdf.test.tsx:undefined:undefined",
        "src/__tests__/components/NodePropertyEditor.resolveType.test.tsx:undefined:undefined",
        "src/__tests__/components/SpecimenIntegration.test.ts:undefined:undefined",
        "src/__tests__/components/SpecimenTemplateManager.test.ts:undefined:undefined",
        "src/__tests__/e2e/reactflow_edge_persistence.unit.test.ts:undefined:undefined",
        "src/__tests__/startupUrlQueryParam.test.tsx:undefined:undefined",
        "src/__tests__/stores/ontologyStore.remove.test.ts:undefined:undefined",
        "src/__tests__/typeHelpers.test.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "waitFor",
      "definedIn": [
        "src/__tests__/components/AutoComplete.ontology.test.tsx",
        "src/__tests__/components/CanvasToolbar.pasteRdf.test.tsx",
        "src/__tests__/components/KnowledgeCanvas.autoload.test.tsx",
        "src/__tests__/components/KnowledgeCanvas.preserve.test.tsx",
        "src/__tests__/components/NodePropertyEditor.resolveType.test.tsx",
        "src/__tests__/components/delete_node_and_edge.test.tsx",
        "src/__tests__/startupUrlQueryParam.test.tsx",
        "src/__tests__/stores/ontologyStore.fatmap.test.tsx"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/AutoComplete.ontology.test.tsx:undefined:undefined",
        "src/__tests__/components/CanvasToolbar.pasteRdf.test.tsx:undefined:undefined",
        "src/__tests__/components/KnowledgeCanvas.autoload.test.tsx:undefined:undefined",
        "src/__tests__/components/KnowledgeCanvas.preserve.test.tsx:undefined:undefined",
        "src/__tests__/components/NodePropertyEditor.resolveType.test.tsx:undefined:undefined",
        "src/__tests__/components/delete_node_and_edge.test.tsx:undefined:undefined",
        "src/__tests__/startupUrlQueryParam.test.tsx:undefined:undefined",
        "src/__tests__/stores/ontologyStore.fatmap.test.tsx:undefined:undefined"
      ]
    },
    {
      "name": "toHaveBeenCalled",
      "definedIn": [
        "node_modules/@vitest/expect/dist/index.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/CanvasToolbar.pasteRdf.test.tsx:undefined:undefined",
        "src/__tests__/startupUrlQueryParam.test.tsx:undefined:undefined",
        "src/__tests__/stores/ontologyStore.iofFetch.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.urlFormatDetection.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "expect",
      "definedIn": [
        "src/__tests__/callgraph/duplicate-calls.test.ts",
        "src/__tests__/components/AutoComplete.ontology.test.tsx",
        "src/__tests__/components/CanvasToolbar.pasteRdf.test.tsx",
        "src/__tests__/components/DisplayLifecycle.test.ts",
        "src/__tests__/components/KnowledgeCanvas.preserve.test.tsx",
        "src/__tests__/components/NodePropertyEditor.resolveType.test.tsx",
        "src/__tests__/components/NodePropertyEditor.test.tsx",
        "src/__tests__/components/SpecimenBadge.abox.test.tsx",
        "src/__tests__/components/SpecimenBadge.test.tsx",
        "src/__tests__/components/SpecimenCanvasMapping.test.ts",
        "src/__tests__/components/SpecimenGoNode.test.ts",
        "src/__tests__/components/SpecimenIntegration.test.ts",
        "src/__tests__/components/SpecimenTemplateManager.test.ts",
        "src/__tests__/components/delete_node_and_edge.test.tsx",
        "src/__tests__/debug/load_additional_debug.test.ts",
        "src/__tests__/e2e/demo_flow_single_triple_change.test.ts",
        "src/__tests__/e2e/reactflow_edge_persistence.test.ts",
        "src/__tests__/e2e/reactflow_edge_persistence.unit.test.ts",
        "src/__tests__/startupUrlQueryParam.test.tsx",
        "src/__tests__/stores/completeRdfWorkflow.test.ts",
        "src/__tests__/stores/demoDataLoad.test.ts",
        "src/__tests__/stores/ontologyStore.autoloadDisabled.test.ts",
        "src/__tests__/stores/ontologyStore.entityPreservation.test.ts",
        "src/__tests__/stores/ontologyStore.fatmap.test.tsx",
        "src/__tests__/stores/ontologyStore.graphPreservation.test.ts",
        "src/__tests__/stores/ontologyStore.iofFetch.test.ts",
        "src/__tests__/stores/ontologyStore.loadOntologyRdf.test.ts",
        "src/__tests__/stores/ontologyStore.remove.test.ts",
        "src/__tests__/stores/ontologyStore.test.ts",
        "src/__tests__/stores/ontologyStore.urlFormatDetection.test.ts",
        "src/__tests__/stores/rdfManager.applyParsedNodes.absoluteIri.test.ts",
        "src/__tests__/stores/rdfManager.namespaces.test.ts",
        "src/__tests__/stores/rdfWorkflow.test.ts",
        "src/__tests__/typeHelpers.test.ts",
        "src/__tests__/utils/graphExporter.test.ts",
        "src/__tests__/utils/nodeDisplay.test.ts",
        "src/__tests__/utils/rdfParser.test.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/callgraph/duplicate-calls.test.ts:undefined:undefined",
        "src/__tests__/components/AutoComplete.ontology.test.tsx:undefined:undefined",
        "src/__tests__/components/CanvasToolbar.pasteRdf.test.tsx:undefined:undefined",
        "src/__tests__/components/DisplayLifecycle.test.ts:undefined:undefined",
        "src/__tests__/components/KnowledgeCanvas.preserve.test.tsx:undefined:undefined",
        "src/__tests__/components/NodePropertyEditor.resolveType.test.tsx:undefined:undefined",
        "src/__tests__/components/NodePropertyEditor.test.tsx:undefined:undefined",
        "src/__tests__/components/SpecimenBadge.abox.test.tsx:undefined:undefined",
        "src/__tests__/components/SpecimenBadge.test.tsx:undefined:undefined",
        "src/__tests__/components/SpecimenCanvasMapping.test.ts:undefined:undefined",
        "src/__tests__/components/SpecimenGoNode.test.ts:undefined:undefined",
        "src/__tests__/components/SpecimenIntegration.test.ts:undefined:undefined",
        "src/__tests__/components/SpecimenTemplateManager.test.ts:undefined:undefined",
        "src/__tests__/components/delete_node_and_edge.test.tsx:undefined:undefined",
        "src/__tests__/debug/load_additional_debug.test.ts:undefined:undefined",
        "src/__tests__/e2e/demo_flow_single_triple_change.test.ts:undefined:undefined",
        "src/__tests__/e2e/reactflow_edge_persistence.test.ts:undefined:undefined",
        "src/__tests__/e2e/reactflow_edge_persistence.unit.test.ts:undefined:undefined",
        "src/__tests__/startupUrlQueryParam.test.tsx:undefined:undefined",
        "src/__tests__/stores/completeRdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/stores/demoDataLoad.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.autoloadDisabled.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.entityPreservation.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.fatmap.test.tsx:undefined:undefined",
        "src/__tests__/stores/ontologyStore.graphPreservation.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.iofFetch.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.loadOntologyRdf.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.remove.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.urlFormatDetection.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfManager.applyParsedNodes.absoluteIri.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfManager.namespaces.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/typeHelpers.test.ts:undefined:undefined",
        "src/__tests__/utils/graphExporter.test.ts:undefined:undefined",
        "src/__tests__/utils/nodeDisplay.test.ts:undefined:undefined",
        "src/__tests__/utils/rdfParser.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "toBeGreaterThan",
      "definedIn": [
        "node_modules/@vitest/expect/dist/index.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/startupUrlQueryParam.test.tsx:undefined:undefined",
        "src/__tests__/stores/ontologyStore.entityPreservation.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.graphPreservation.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.urlFormatDetection.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/utils/graphExporter.test.ts:undefined:undefined",
        "src/__tests__/utils/rdfParser.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "toContain",
      "definedIn": [
        "node_modules/@vitest/expect/dist/index.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/SpecimenBadge.abox.test.tsx:undefined:undefined",
        "src/__tests__/components/SpecimenBadge.test.tsx:undefined:undefined",
        "src/__tests__/e2e/demo_flow_single_triple_change.test.ts:undefined:undefined",
        "src/__tests__/startupUrlQueryParam.test.tsx:undefined:undefined",
        "src/__tests__/stores/completeRdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.remove.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/utils/graphExporter.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "describe",
      "definedIn": [
        "src/__tests__/components/AutoComplete.ontology.test.tsx",
        "src/__tests__/components/CanvasToolbar.pasteRdf.test.tsx",
        "src/__tests__/components/DisplayLifecycle.test.ts",
        "src/__tests__/components/KnowledgeCanvas.autoload.test.tsx",
        "src/__tests__/components/KnowledgeCanvas.preserve.test.tsx",
        "src/__tests__/components/NodePropertyEditor.resolveType.test.tsx",
        "src/__tests__/components/NodePropertyEditor.test.tsx",
        "src/__tests__/components/SpecimenBadge.abox.test.tsx",
        "src/__tests__/components/SpecimenBadge.test.tsx",
        "src/__tests__/components/SpecimenCanvasMapping.test.ts",
        "src/__tests__/components/SpecimenGoNode.test.ts",
        "src/__tests__/components/SpecimenIntegration.test.ts",
        "src/__tests__/components/SpecimenTemplateManager.test.ts",
        "src/__tests__/components/delete_node_and_edge.test.tsx",
        "src/__tests__/debug/load_additional_debug.test.ts",
        "src/__tests__/e2e/demo_flow_single_triple_change.test.ts",
        "src/__tests__/e2e/reactflow_edge_persistence.test.ts",
        "src/__tests__/stores/completeRdfWorkflow.test.ts",
        "src/__tests__/stores/demoDataLoad.test.ts",
        "src/__tests__/stores/ontologyStore.autoloadDisabled.test.ts",
        "src/__tests__/stores/ontologyStore.entityPreservation.test.ts",
        "src/__tests__/stores/ontologyStore.fatmap.test.tsx",
        "src/__tests__/stores/ontologyStore.graphPreservation.test.ts",
        "src/__tests__/stores/ontologyStore.iofFetch.test.ts",
        "src/__tests__/stores/ontologyStore.loadOntologyRdf.test.ts",
        "src/__tests__/stores/ontologyStore.test.ts",
        "src/__tests__/stores/ontologyStore.urlFormatDetection.test.ts",
        "src/__tests__/stores/rdfManager.applyParsedNodes.absoluteIri.test.ts",
        "src/__tests__/stores/rdfWorkflow.test.ts",
        "src/__tests__/typeHelpers.test.ts",
        "src/__tests__/utils/graphExporter.test.ts",
        "src/__tests__/utils/nodeDisplay.test.ts",
        "src/__tests__/utils/rdfParser.test.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/AutoComplete.ontology.test.tsx:undefined:undefined",
        "src/__tests__/components/CanvasToolbar.pasteRdf.test.tsx:undefined:undefined",
        "src/__tests__/components/DisplayLifecycle.test.ts:undefined:undefined",
        "src/__tests__/components/KnowledgeCanvas.autoload.test.tsx:undefined:undefined",
        "src/__tests__/components/KnowledgeCanvas.preserve.test.tsx:undefined:undefined",
        "src/__tests__/components/NodePropertyEditor.resolveType.test.tsx:undefined:undefined",
        "src/__tests__/components/NodePropertyEditor.test.tsx:undefined:undefined",
        "src/__tests__/components/SpecimenBadge.abox.test.tsx:undefined:undefined",
        "src/__tests__/components/SpecimenBadge.test.tsx:undefined:undefined",
        "src/__tests__/components/SpecimenCanvasMapping.test.ts:undefined:undefined",
        "src/__tests__/components/SpecimenGoNode.test.ts:undefined:undefined",
        "src/__tests__/components/SpecimenIntegration.test.ts:undefined:undefined",
        "src/__tests__/components/SpecimenTemplateManager.test.ts:undefined:undefined",
        "src/__tests__/components/delete_node_and_edge.test.tsx:undefined:undefined",
        "src/__tests__/debug/load_additional_debug.test.ts:undefined:undefined",
        "src/__tests__/e2e/demo_flow_single_triple_change.test.ts:undefined:undefined",
        "src/__tests__/e2e/reactflow_edge_persistence.test.ts:undefined:undefined",
        "src/__tests__/stores/completeRdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/stores/demoDataLoad.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.autoloadDisabled.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.entityPreservation.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.fatmap.test.tsx:undefined:undefined",
        "src/__tests__/stores/ontologyStore.graphPreservation.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.iofFetch.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.loadOntologyRdf.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.urlFormatDetection.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfManager.applyParsedNodes.absoluteIri.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/typeHelpers.test.ts:undefined:undefined",
        "src/__tests__/utils/graphExporter.test.ts:undefined:undefined",
        "src/__tests__/utils/nodeDisplay.test.ts:undefined:undefined",
        "src/__tests__/utils/rdfParser.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "it",
      "definedIn": [
        "src/__tests__/components/AutoComplete.ontology.test.tsx",
        "src/__tests__/components/DisplayLifecycle.test.ts",
        "src/__tests__/components/NodePropertyEditor.resolveType.test.tsx",
        "src/__tests__/components/NodePropertyEditor.test.tsx",
        "src/__tests__/components/SpecimenBadge.abox.test.tsx",
        "src/__tests__/components/SpecimenBadge.test.tsx",
        "src/__tests__/components/SpecimenCanvasMapping.test.ts",
        "src/__tests__/components/SpecimenGoNode.test.ts",
        "src/__tests__/components/SpecimenIntegration.test.ts",
        "src/__tests__/components/SpecimenTemplateManager.test.ts",
        "src/__tests__/components/delete_node_and_edge.test.tsx",
        "src/__tests__/debug/load_additional_debug.test.ts",
        "src/__tests__/e2e/demo_flow_single_triple_change.test.ts",
        "src/__tests__/e2e/reactflow_edge_persistence.test.ts",
        "src/__tests__/stores/completeRdfWorkflow.test.ts",
        "src/__tests__/stores/demoDataLoad.test.ts",
        "src/__tests__/stores/ontologyStore.autoloadDisabled.test.ts",
        "src/__tests__/stores/ontologyStore.entityPreservation.test.ts",
        "src/__tests__/stores/ontologyStore.fatmap.test.tsx",
        "src/__tests__/stores/ontologyStore.graphPreservation.test.ts",
        "src/__tests__/stores/ontologyStore.iofFetch.test.ts",
        "src/__tests__/stores/ontologyStore.loadOntologyRdf.test.ts",
        "src/__tests__/stores/ontologyStore.test.ts",
        "src/__tests__/stores/ontologyStore.urlFormatDetection.test.ts",
        "src/__tests__/stores/rdfManager.applyParsedNodes.absoluteIri.test.ts",
        "src/__tests__/stores/rdfManager.namespaces.test.ts",
        "src/__tests__/stores/rdfWorkflow.test.ts",
        "src/__tests__/typeHelpers.test.ts",
        "src/__tests__/utils/graphExporter.test.ts",
        "src/__tests__/utils/nodeDisplay.test.ts",
        "src/__tests__/utils/rdfParser.test.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/AutoComplete.ontology.test.tsx:undefined:undefined",
        "src/__tests__/components/DisplayLifecycle.test.ts:undefined:undefined",
        "src/__tests__/components/NodePropertyEditor.resolveType.test.tsx:undefined:undefined",
        "src/__tests__/components/NodePropertyEditor.test.tsx:undefined:undefined",
        "src/__tests__/components/SpecimenBadge.abox.test.tsx:undefined:undefined",
        "src/__tests__/components/SpecimenBadge.test.tsx:undefined:undefined",
        "src/__tests__/components/SpecimenCanvasMapping.test.ts:undefined:undefined",
        "src/__tests__/components/SpecimenGoNode.test.ts:undefined:undefined",
        "src/__tests__/components/SpecimenIntegration.test.ts:undefined:undefined",
        "src/__tests__/components/SpecimenTemplateManager.test.ts:undefined:undefined",
        "src/__tests__/components/delete_node_and_edge.test.tsx:undefined:undefined",
        "src/__tests__/debug/load_additional_debug.test.ts:undefined:undefined",
        "src/__tests__/e2e/demo_flow_single_triple_change.test.ts:undefined:undefined",
        "src/__tests__/e2e/reactflow_edge_persistence.test.ts:undefined:undefined",
        "src/__tests__/stores/completeRdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/stores/demoDataLoad.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.autoloadDisabled.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.entityPreservation.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.fatmap.test.tsx:undefined:undefined",
        "src/__tests__/stores/ontologyStore.graphPreservation.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.iofFetch.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.loadOntologyRdf.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.urlFormatDetection.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfManager.applyParsedNodes.absoluteIri.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfManager.namespaces.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/typeHelpers.test.ts:undefined:undefined",
        "src/__tests__/utils/graphExporter.test.ts:undefined:undefined",
        "src/__tests__/utils/nodeDisplay.test.ts:undefined:undefined",
        "src/__tests__/utils/rdfParser.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "toBe",
      "definedIn": [
        "node_modules/@vitest/expect/dist/index.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/callgraph/duplicate-calls.test.ts:undefined:undefined",
        "src/__tests__/components/CanvasToolbar.pasteRdf.test.tsx:undefined:undefined",
        "src/__tests__/components/DisplayLifecycle.test.ts:undefined:undefined",
        "src/__tests__/components/NodePropertyEditor.test.tsx:undefined:undefined",
        "src/__tests__/components/SpecimenBadge.abox.test.tsx:undefined:undefined",
        "src/__tests__/components/SpecimenBadge.test.tsx:undefined:undefined",
        "src/__tests__/components/SpecimenCanvasMapping.test.ts:undefined:undefined",
        "src/__tests__/components/SpecimenGoNode.test.ts:undefined:undefined",
        "src/__tests__/components/SpecimenIntegration.test.ts:undefined:undefined",
        "src/__tests__/components/SpecimenTemplateManager.test.ts:undefined:undefined",
        "src/__tests__/components/delete_node_and_edge.test.tsx:undefined:undefined",
        "src/__tests__/debug/load_additional_debug.test.ts:undefined:undefined",
        "src/__tests__/e2e/demo_flow_single_triple_change.test.ts:undefined:undefined",
        "src/__tests__/e2e/reactflow_edge_persistence.test.ts:undefined:undefined",
        "src/__tests__/e2e/reactflow_edge_persistence.unit.test.ts:undefined:undefined",
        "src/__tests__/stores/completeRdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/stores/demoDataLoad.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.autoloadDisabled.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.entityPreservation.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.fatmap.test.tsx:undefined:undefined",
        "src/__tests__/stores/ontologyStore.graphPreservation.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.iofFetch.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.remove.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.urlFormatDetection.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfManager.applyParsedNodes.absoluteIri.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfManager.namespaces.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/typeHelpers.test.ts:undefined:undefined",
        "src/__tests__/utils/graphExporter.test.ts:undefined:undefined",
        "src/__tests__/utils/nodeDisplay.test.ts:undefined:undefined",
        "src/__tests__/utils/rdfParser.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "deriveInitialNodeType",
      "definedIn": [
        "src/__tests__/typeHelpers.test.ts",
        "src/components/Canvas/helpers/nodePropertyHelpers.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/typeHelpers.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "useIsMobile",
      "definedIn": [
        "src/components/ui/sidebar.tsx",
        "src/hooks/use-mobile.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/sidebar.tsx:undefined:undefined"
      ]
    },
    {
      "name": "useState",
      "definedIn": [
        "node_modules/@types/react/index.d.ts",
        "src/components/Canvas/AnnotationPropertyDialog.tsx",
        "src/components/Canvas/CanvasToolbar.tsx",
        "src/components/Canvas/ConfigurationPanel.tsx",
        "src/components/Canvas/CustomOntologyNode.tsx",
        "src/components/Canvas/KnowledgeCanvas.tsx",
        "src/components/Canvas/LinkPropertyEditor.tsx",
        "src/components/Canvas/NodePropertyEditor.tsx",
        "src/components/Canvas/ResizableNamespaceLegend.tsx",
        "src/components/Canvas/core/namespacePalette.ts",
        "src/components/ui/AutoComplete.tsx",
        "src/components/ui/EntityAutocomplete.tsx",
        "src/hooks/useCanvasState.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/AnnotationPropertyDialog.tsx:undefined:undefined",
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined",
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/LinkPropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined",
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined",
        "src/components/ui/AutoComplete.tsx:undefined:undefined",
        "src/components/ui/EntityAutocomplete.tsx:undefined:undefined",
        "src/components/ui/carousel.tsx:undefined:undefined",
        "src/components/ui/sidebar.tsx:undefined:undefined",
        "src/hooks/use-mobile.tsx:undefined:undefined",
        "src/hooks/use-toast.ts:undefined:undefined",
        "src/hooks/useCanvasState.ts:undefined:undefined"
      ]
    },
    {
      "name": "matchMedia",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/hooks/use-mobile.tsx:undefined:undefined",
        "src/utils/theme.ts:undefined:undefined"
      ]
    },
    {
      "name": "setIsMobile",
      "definedIn": [
        "src/hooks/use-mobile.tsx"
      ],
      "role": "",
      "callSites": [
        "src/hooks/use-mobile.tsx:undefined:undefined"
      ]
    },
    {
      "name": "addEventListener",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined",
        "src/components/ui/sidebar.tsx:undefined:undefined",
        "src/hooks/use-mobile.tsx:undefined:undefined",
        "src/utils/theme.ts:undefined:undefined"
      ]
    },
    {
      "name": "removeEventListener",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined",
        "src/components/ui/sidebar.tsx:undefined:undefined",
        "src/hooks/use-mobile.tsx:undefined:undefined"
      ]
    },
    {
      "name": "genId",
      "definedIn": [
        "src/hooks/use-toast.ts"
      ],
      "role": "",
      "callSites": [
        "src/hooks/use-toast.ts:undefined:undefined"
      ]
    },
    {
      "name": "dispatch",
      "definedIn": [
        "src/hooks/use-toast.ts"
      ],
      "role": "",
      "callSites": [
        "src/hooks/use-toast.ts:undefined:undefined"
      ]
    },
    {
      "name": "toast",
      "definedIn": [
        "src/components/ui/use-toast.ts",
        "src/hooks/use-toast.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "useToast",
      "definedIn": [
        "src/components/ui/toaster.tsx",
        "src/hooks/use-toast.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/toaster.tsx:undefined:undefined"
      ]
    },
    {
      "name": "toString",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts",
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/SpecimenBadge.test.tsx:undefined:undefined",
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined",
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined",
        "src/hooks/use-toast.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/startupDebug.ts:undefined:undefined"
      ]
    },
    {
      "name": "has",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es2015.collection.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/e2e/demo_flow_single_triple_change.test.ts:undefined:undefined",
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/core/mappingHelpers.ts:undefined:undefined",
        "src/hooks/use-toast.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/stores/reasoningStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined",
        "src/utils/termUtils.ts:undefined:undefined"
      ]
    },
    {
      "name": "setTimeout",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/KnowledgeCanvas.preserve.test.tsx:undefined:undefined",
        "src/__tests__/stores/rdfManager.namespaces.test.ts:undefined:undefined",
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/hooks/use-toast.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/stores/reasoningStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "delete",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es2015.collection.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/hooks/use-toast.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "set",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es2015.collection.d.ts",
        "src/stores/appConfigStore.ts",
        "src/stores/ontologyStore.ts",
        "src/stores/reasoningStore.ts",
        "src/stores/settingsStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/core/mappingHelpers.ts:undefined:undefined",
        "src/hooks/use-toast.ts:undefined:undefined",
        "src/stores/appConfigStore.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/stores/reasoningStore.ts:undefined:undefined",
        "src/stores/settingsStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined",
        "src/utils/termUtils.ts:undefined:undefined",
        "src/utils/wellKnownOntologies.ts:undefined:undefined"
      ]
    },
    {
      "name": "slice",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined",
        "src/components/ui/EntityAutocomplete.tsx:undefined:undefined",
        "src/hooks/use-toast.ts:undefined:undefined",
        "src/stores/appConfigStore.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/stores/reasoningStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/startupDebug.ts:undefined:undefined",
        "src/utils/termUtils.ts:undefined:undefined"
      ]
    },
    {
      "name": "addToRemoveQueue",
      "definedIn": [
        "src/hooks/use-toast.ts"
      ],
      "role": "",
      "callSites": [
        "src/hooks/use-toast.ts:undefined:undefined"
      ]
    },
    {
      "name": "forEach",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es2015.collection.d.ts",
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined",
        "src/hooks/use-toast.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/stores/reasoningStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "reducer",
      "definedIn": [
        "src/hooks/use-toast.ts"
      ],
      "role": "",
      "callSites": [
        "src/hooks/use-toast.ts:undefined:undefined"
      ]
    },
    {
      "name": "listener",
      "definedIn": [
        "src/hooks/use-toast.ts"
      ],
      "role": "",
      "callSites": [
        "src/hooks/use-toast.ts:undefined:undefined"
      ]
    },
    {
      "name": "dismiss",
      "definedIn": [
        "src/hooks/use-toast.ts"
      ],
      "role": "",
      "callSites": [
        "src/hooks/use-toast.ts:undefined:undefined"
      ]
    },
    {
      "name": "push",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/utils/rdfParser.test.ts:undefined:undefined",
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/EdgeParams.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/LayoutManager.ts:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/core/mappingHelpers.ts:undefined:undefined",
        "src/components/Canvas/layout/dagreLayout.ts:undefined:undefined",
        "src/hooks/use-toast.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/stores/reasoningStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined",
        "src/utils/startupDebug.ts:undefined:undefined",
        "src/utils/termUtils.ts:undefined:undefined",
        "src/utils/wellKnownOntologies.ts:undefined:undefined"
      ]
    },
    {
      "name": "indexOf",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/hooks/use-toast.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined",
        "src/utils/termUtils.ts:undefined:undefined"
      ]
    },
    {
      "name": "splice",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/hooks/use-toast.ts:undefined:undefined"
      ]
    },
    {
      "name": "useCallback",
      "definedIn": [
        "node_modules/@types/react/index.d.ts",
        "src/components/Canvas/KnowledgeCanvas.tsx",
        "src/hooks/useCanvasState.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/ui/carousel.tsx:undefined:undefined",
        "src/components/ui/sidebar.tsx:undefined:undefined",
        "src/hooks/useCanvasState.ts:undefined:undefined"
      ]
    },
    {
      "name": "setShowLegend",
      "definedIn": [
        "src/components/Canvas/KnowledgeCanvas.tsx",
        "src/hooks/useCanvasState.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/hooks/useCanvasState.ts:undefined:undefined"
      ]
    },
    {
      "name": "setIsLoading",
      "definedIn": [
        "src/hooks/useCanvasState.ts"
      ],
      "role": "",
      "callSites": [
        "src/hooks/useCanvasState.ts:undefined:undefined"
      ]
    },
    {
      "name": "setLoadingProgress",
      "definedIn": [
        "src/hooks/useCanvasState.ts"
      ],
      "role": "",
      "callSites": [
        "src/hooks/useCanvasState.ts:undefined:undefined"
      ]
    },
    {
      "name": "setLoadingMessage",
      "definedIn": [
        "src/hooks/useCanvasState.ts"
      ],
      "role": "",
      "callSites": [
        "src/hooks/useCanvasState.ts:undefined:undefined"
      ]
    },
    {
      "name": "setSelectedNode",
      "definedIn": [
        "src/hooks/useCanvasState.ts",
        "src/types/canvas.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/hooks/useCanvasState.ts:undefined:undefined"
      ]
    },
    {
      "name": "setShowNodeEditor",
      "definedIn": [
        "src/hooks/useCanvasState.ts"
      ],
      "role": "",
      "callSites": [
        "src/hooks/useCanvasState.ts:undefined:undefined"
      ]
    },
    {
      "name": "setShowLinkEditor",
      "definedIn": [
        "src/hooks/useCanvasState.ts"
      ],
      "role": "",
      "callSites": [
        "src/hooks/useCanvasState.ts:undefined:undefined"
      ]
    },
    {
      "name": "setSelectedLink",
      "definedIn": [
        "src/hooks/useCanvasState.ts",
        "src/types/canvas.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/hooks/useCanvasState.ts:undefined:undefined"
      ]
    },
    {
      "name": "setShowReasoningReport",
      "definedIn": [
        "src/hooks/useCanvasState.ts"
      ],
      "role": "",
      "callSites": [
        "src/hooks/useCanvasState.ts:undefined:undefined"
      ]
    },
    {
      "name": "cn",
      "definedIn": [
        "src/components/Canvas/CustomOntologyNode.tsx",
        "src/components/ui/AutoComplete.tsx",
        "src/components/ui/EntityAutocomplete.tsx",
        "src/components/ui/accordion.tsx",
        "src/components/ui/alert-dialog.tsx",
        "src/components/ui/alert.tsx",
        "src/components/ui/avatar.tsx",
        "src/components/ui/badge.tsx",
        "src/components/ui/breadcrumb.tsx",
        "src/components/ui/button.tsx",
        "src/components/ui/calendar.tsx",
        "src/components/ui/card.tsx",
        "src/components/ui/carousel.tsx",
        "src/components/ui/chart.tsx",
        "src/components/ui/checkbox.tsx",
        "src/components/ui/command.tsx",
        "src/components/ui/context-menu.tsx",
        "src/components/ui/dialog.tsx",
        "src/components/ui/drawer.tsx",
        "src/components/ui/dropdown-menu.tsx",
        "src/components/ui/form.tsx",
        "src/components/ui/hover-card.tsx",
        "src/components/ui/input-otp.tsx",
        "src/components/ui/input.tsx",
        "src/components/ui/label.tsx",
        "src/components/ui/menubar.tsx",
        "src/components/ui/navigation-menu.tsx",
        "src/components/ui/pagination.tsx",
        "src/components/ui/popover.tsx",
        "src/components/ui/progress.tsx",
        "src/components/ui/radio-group.tsx",
        "src/components/ui/resizable.tsx",
        "src/components/ui/scroll-area.tsx",
        "src/components/ui/select.tsx",
        "src/components/ui/separator.tsx",
        "src/components/ui/sheet.tsx",
        "src/components/ui/sidebar.tsx",
        "src/components/ui/skeleton.tsx",
        "src/components/ui/slider.tsx",
        "src/components/ui/switch.tsx",
        "src/components/ui/table.tsx",
        "src/components/ui/tabs.tsx",
        "src/components/ui/textarea.tsx",
        "src/components/ui/toast.tsx",
        "src/components/ui/toggle-group.tsx",
        "src/components/ui/toggle.tsx",
        "src/components/ui/tooltip.tsx",
        "src/lib/utils.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/ui/AutoComplete.tsx:undefined:undefined",
        "src/components/ui/EntityAutocomplete.tsx:undefined:undefined",
        "src/components/ui/accordion.tsx:undefined:undefined",
        "src/components/ui/alert-dialog.tsx:undefined:undefined",
        "src/components/ui/alert.tsx:undefined:undefined",
        "src/components/ui/avatar.tsx:undefined:undefined",
        "src/components/ui/badge.tsx:undefined:undefined",
        "src/components/ui/breadcrumb.tsx:undefined:undefined",
        "src/components/ui/button.tsx:undefined:undefined",
        "src/components/ui/calendar.tsx:undefined:undefined",
        "src/components/ui/card.tsx:undefined:undefined",
        "src/components/ui/carousel.tsx:undefined:undefined",
        "src/components/ui/chart.tsx:undefined:undefined",
        "src/components/ui/checkbox.tsx:undefined:undefined",
        "src/components/ui/command.tsx:undefined:undefined",
        "src/components/ui/context-menu.tsx:undefined:undefined",
        "src/components/ui/dialog.tsx:undefined:undefined",
        "src/components/ui/drawer.tsx:undefined:undefined",
        "src/components/ui/dropdown-menu.tsx:undefined:undefined",
        "src/components/ui/form.tsx:undefined:undefined",
        "src/components/ui/hover-card.tsx:undefined:undefined",
        "src/components/ui/input-otp.tsx:undefined:undefined",
        "src/components/ui/input.tsx:undefined:undefined",
        "src/components/ui/label.tsx:undefined:undefined",
        "src/components/ui/menubar.tsx:undefined:undefined",
        "src/components/ui/navigation-menu.tsx:undefined:undefined",
        "src/components/ui/pagination.tsx:undefined:undefined",
        "src/components/ui/popover.tsx:undefined:undefined",
        "src/components/ui/progress.tsx:undefined:undefined",
        "src/components/ui/radio-group.tsx:undefined:undefined",
        "src/components/ui/resizable.tsx:undefined:undefined",
        "src/components/ui/scroll-area.tsx:undefined:undefined",
        "src/components/ui/select.tsx:undefined:undefined",
        "src/components/ui/separator.tsx:undefined:undefined",
        "src/components/ui/sheet.tsx:undefined:undefined",
        "src/components/ui/sidebar.tsx:undefined:undefined",
        "src/components/ui/skeleton.tsx:undefined:undefined",
        "src/components/ui/slider.tsx:undefined:undefined",
        "src/components/ui/switch.tsx:undefined:undefined",
        "src/components/ui/table.tsx:undefined:undefined",
        "src/components/ui/tabs.tsx:undefined:undefined",
        "src/components/ui/textarea.tsx:undefined:undefined",
        "src/components/ui/toast.tsx:undefined:undefined",
        "src/components/ui/toggle-group.tsx:undefined:undefined",
        "src/components/ui/toggle.tsx:undefined:undefined",
        "src/components/ui/tooltip.tsx:undefined:undefined"
      ]
    },
    {
      "name": "twMerge",
      "definedIn": [
        "src/lib/utils.ts"
      ],
      "role": "",
      "callSites": [
        "src/lib/utils.ts:undefined:undefined"
      ]
    },
    {
      "name": "clsx",
      "definedIn": [
        "src/lib/utils.ts"
      ],
      "role": "",
      "callSites": [
        "src/lib/utils.ts:undefined:undefined"
      ]
    },
    {
      "name": "useLocation",
      "definedIn": [
        "src/pages/NotFound.tsx"
      ],
      "role": "",
      "callSites": [
        "src/pages/NotFound.tsx:undefined:undefined"
      ]
    },
    {
      "name": "fallback",
      "definedIn": [
        "src/__tests__/callgraph/duplicate-calls.test.ts",
        "src/__tests__/stores/ontologyStore.remove.test.ts",
        "src/components/Canvas/CanvasToolbar.tsx",
        "src/components/Canvas/ConfigurationPanel.tsx",
        "src/components/Canvas/KnowledgeCanvas.tsx",
        "src/pages/NotFound.tsx",
        "src/stores/ontologyStore.ts",
        "src/stores/settingsStore.ts",
        "src/utils/rdfManager.ts",
        "src/utils/rdfParser.ts",
        "src/utils/startupDebug.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/callgraph/duplicate-calls.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.remove.test.ts:undefined:undefined",
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/pages/NotFound.tsx:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/stores/settingsStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined",
        "src/utils/startupDebug.ts:undefined:undefined"
      ]
    },
    {
      "name": "error",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts",
        "node_modules/sonner/dist/index.d.ts",
        "src/utils/startupDebug.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/debug/load_additional_debug.test.ts:undefined:undefined",
        "src/components/Canvas/AnnotationPropertyDialog.tsx:undefined:undefined",
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/LinkPropertyEditor.tsx:undefined:undefined",
        "src/pages/NotFound.tsx:undefined:undefined",
        "src/stores/appConfigStore.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/stores/settingsStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/startupDebug.ts:undefined:undefined"
      ]
    },
    {
      "name": "create",
      "definedIn": [
        "src/stores/appConfigStore.ts",
        "src/stores/ontologyStore.ts",
        "src/stores/reasoningStore.ts",
        "src/stores/settingsStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/stores/appConfigStore.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/stores/reasoningStore.ts:undefined:undefined",
        "src/stores/settingsStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "persist",
      "definedIn": [
        "src/stores/appConfigStore.ts",
        "src/stores/settingsStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/stores/appConfigStore.ts:undefined:undefined",
        "src/stores/settingsStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "addRecentLayout",
      "definedIn": [
        "src/stores/appConfigStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/stores/appConfigStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "get",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts",
        "../../../node_modules/typescript/lib/lib.es2015.collection.d.ts",
        "src/stores/appConfigStore.ts",
        "src/stores/ontologyStore.ts",
        "src/stores/reasoningStore.ts",
        "src/stores/settingsStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/core/mappingHelpers.ts:undefined:undefined",
        "src/stores/appConfigStore.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/stores/reasoningStore.ts:undefined:undefined",
        "src/stores/settingsStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined",
        "src/utils/startupDebug.ts:undefined:undefined",
        "src/utils/termUtils.ts:undefined:undefined",
        "src/utils/wellKnownOntologies.ts:undefined:undefined"
      ]
    },
    {
      "name": "max",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/LayoutManager.ts:undefined:undefined",
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined",
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined",
        "src/stores/appConfigStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "min",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined",
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined",
        "src/components/Canvas/layout/dagreLayout.ts:undefined:undefined",
        "src/stores/appConfigStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "Boolean",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined",
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/ui/AutoComplete.tsx:undefined:undefined",
        "src/stores/appConfigStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/startupDebug.ts:undefined:undefined"
      ]
    },
    {
      "name": "unshift",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/stores/appConfigStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "stringify",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/stores/appConfigStore.ts:undefined:undefined",
        "src/stores/settingsStore.ts:undefined:undefined",
        "src/utils/startupDebug.ts:undefined:undefined"
      ]
    },
    {
      "name": "parse",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/utils/graphExporter.test.ts:undefined:undefined",
        "src/stores/appConfigStore.ts:undefined:undefined",
        "src/stores/settingsStore.ts:undefined:undefined",
        "src/utils/startupDebug.ts:undefined:undefined"
      ]
    },
    {
      "name": "createJSONStorage",
      "definedIn": [
        "src/stores/appConfigStore.ts",
        "src/stores/settingsStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/stores/appConfigStore.ts:undefined:undefined",
        "src/stores/settingsStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "shouldLogCallGraph",
      "definedIn": [
        "src/stores/ontologyStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "logCallGraph",
      "definedIn": [
        "src/stores/ontologyStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "getNodeData",
      "definedIn": [
        "src/stores/ontologyStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "incrementalReconcileFromQuads",
      "definedIn": [
        "src/stores/ontologyStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "extractReferencedOntologies",
      "definedIn": [
        "src/stores/ontologyStore.ts"
      ],
      "role": "",
      "callSites": []
    },
    {
      "name": "deriveOntologyName",
      "definedIn": [
        "src/stores/ontologyStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "ensureNamespacesPresent",
      "definedIn": [
        "src/stores/ontologyStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "debug",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts",
        "src/components/Canvas/CustomOntologyNode.tsx",
        "src/components/Canvas/layout/dagreLayout.ts",
        "src/stores/ontologyStore.ts",
        "src/utils/rdfManager.ts",
        "src/utils/startupDebug.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/debug/load_additional_debug.test.ts:undefined:undefined",
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/LinkPropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/core/edgeHelpers.ts:undefined:undefined",
        "src/components/Canvas/layout/dagreLayout.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/startupDebug.ts:undefined:undefined"
      ]
    },
    {
      "name": "startsWith",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es2015.core.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined",
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/LinkPropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/core/mappingHelpers.ts:undefined:undefined",
        "src/components/Canvas/helpers/nodePropertyHelpers.ts:undefined:undefined",
        "src/components/ui/AutoComplete.tsx:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/stores/reasoningStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined",
        "src/utils/termUtils.ts:undefined:undefined"
      ]
    },
    {
      "name": "toLowerCase",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/stores/ontologyStore.iofFetch.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.urlFormatDetection.test.ts:undefined:undefined",
        "src/__tests__/utils/graphExporter.test.ts:undefined:undefined",
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined",
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/NamespaceLegendCore.tsx:undefined:undefined",
        "src/components/Canvas/core/mappingHelpers.ts:undefined:undefined",
        "src/components/ui/AutoComplete.tsx:undefined:undefined",
        "src/components/ui/EntityAutocomplete.tsx:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined",
        "src/utils/termUtils.ts:undefined:undefined"
      ]
    },
    {
      "name": "replace",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined",
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/LinkPropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/NamespaceLegendCore.tsx:undefined:undefined",
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined",
        "src/components/Canvas/helpers/namespaceHelpers.ts:undefined:undefined",
        "src/components/Canvas/helpers/paletteHelpers.ts:undefined:undefined",
        "src/components/ui/AutoComplete.tsx:undefined:undefined",
        "src/components/ui/chart.tsx:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/stores/reasoningStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "some",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/e2e/reactflow_edge_persistence.unit.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.autoloadDisabled.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.remove.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfManager.applyParsedNodes.absoluteIri.test.ts:undefined:undefined",
        "src/__tests__/utils/rdfParser.test.ts:undefined:undefined",
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined",
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/core/mappingHelpers.ts:undefined:undefined",
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined",
        "src/components/ui/AutoComplete.tsx:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "keys",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/stores/ontologyStore.test.ts:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined",
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined",
        "src/components/Canvas/helpers/diagramHelpers.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/stores/reasoningStore.ts:undefined:undefined",
        "src/utils/startupDebug.ts:undefined:undefined",
        "src/utils/termUtils.ts:undefined:undefined"
      ]
    },
    {
      "name": "getNamespaces",
      "definedIn": [
        "src/utils/rdfManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/debug/load_additional_debug.test.ts:undefined:undefined",
        "src/__tests__/stores/completeRdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.graphPreservation.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.loadOntologyRdf.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.remove.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfManager.namespaces.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfWorkflow.test.ts:undefined:undefined",
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "loadFromUrl",
      "definedIn": [
        "src/utils/rdfManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "parseRDFFile",
      "definedIn": [
        "src/__tests__/utils/rdfParser.test.ts",
        "src/stores/ontologyStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/utils/rdfParser.test.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "loadRDFIntoGraph",
      "definedIn": [
        "src/utils/rdfManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/KnowledgeCanvas.preserve.test.tsx:undefined:undefined",
        "src/__tests__/e2e/reactflow_edge_persistence.unit.test.ts:undefined:undefined",
        "src/__tests__/utils/loadFixtureRdf.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "applyParsedNamespaces",
      "definedIn": [
        "src/utils/rdfManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "getStore",
      "definedIn": [
        "src/utils/rdfManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/e2e/demo_flow_single_triple_change.test.ts:undefined:undefined",
        "src/__tests__/e2e/reactflow_edge_persistence.unit.test.ts:undefined:undefined",
        "src/__tests__/stores/completeRdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.entityPreservation.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.iofFetch.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.loadOntologyRdf.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.remove.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.urlFormatDetection.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfWorkflow.test.ts:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "expandPrefix",
      "definedIn": [
        "src/utils/rdfManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/stores/rdfWorkflow.test.ts:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "namedNode",
      "definedIn": [
        "src/__tests__/components/delete_node_and_edge.test.tsx",
        "src/__tests__/e2e/reactflow_edge_persistence.test.ts",
        "src/__tests__/e2e/reactflow_edge_persistence.unit.test.ts",
        "src/__tests__/stores/ontologyStore.remove.test.ts",
        "src/components/Canvas/KnowledgeCanvas.tsx",
        "src/components/Canvas/LinkPropertyEditor.tsx",
        "src/components/Canvas/NodePropertyEditor.tsx",
        "src/components/Canvas/core/edgeHelpers.ts",
        "src/stores/ontologyStore.ts",
        "src/stores/reasoningStore.ts",
        "src/utils/rdfManager.ts",
        "src/utils/rdfParser.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/delete_node_and_edge.test.tsx:undefined:undefined",
        "src/__tests__/e2e/reactflow_edge_persistence.test.ts:undefined:undefined",
        "src/__tests__/e2e/reactflow_edge_persistence.unit.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.remove.test.ts:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/LinkPropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/core/edgeHelpers.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/stores/reasoningStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "entries",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
        "../../../node_modules/typescript/lib/lib.es2017.object.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined",
        "src/components/Canvas/core/mappingHelpers.ts:undefined:undefined",
        "src/components/ui/chart.tsx:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined",
        "src/utils/termUtils.ts:undefined:undefined"
      ]
    },
    {
      "name": "values",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es2015.iterable.d.ts",
        "../../../node_modules/typescript/lib/lib.es2017.object.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/stores/ontologyStore.iofFetch.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.urlFormatDetection.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfManager.applyParsedNodes.absoluteIri.test.ts:undefined:undefined",
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/stores/reasoningStore.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "includes",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es2015.core.d.ts",
        "../../../node_modules/typescript/lib/lib.es2016.array.include.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/SpecimenCanvasMapping.test.ts:undefined:undefined",
        "src/__tests__/components/SpecimenGoNode.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.iofFetch.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.urlFormatDetection.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfManager.applyParsedNodes.absoluteIri.test.ts:undefined:undefined",
        "src/__tests__/utils/graphExporter.test.ts:undefined:undefined",
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/core/mappingHelpers.ts:undefined:undefined",
        "src/components/Canvas/core/nodeDisplay.ts:undefined:undefined",
        "src/components/Canvas/helpers/diagramHelpers.ts:undefined:undefined",
        "src/components/Canvas/helpers/nodePropertyHelpers.ts:undefined:undefined",
        "src/components/Canvas/helpers/paletteHelpers.ts:undefined:undefined",
        "src/components/ui/AutoComplete.tsx:undefined:undefined",
        "src/components/ui/EntityAutocomplete.tsx:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/stores/reasoningStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined",
        "src/utils/termUtils.ts:undefined:undefined"
      ]
    },
    {
      "name": "updateNode",
      "definedIn": [
        "src/components/Canvas/KnowledgeCanvas.tsx",
        "src/stores/ontologyStore.ts",
        "src/utils/rdfManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/e2e/demo_flow_single_triple_change.test.ts:undefined:undefined",
        "src/__tests__/stores/completeRdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.entityPreservation.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.fatmap.test.tsx:undefined:undefined",
        "src/__tests__/stores/ontologyStore.graphPreservation.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfWorkflow.test.ts:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "from",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es2015.core.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/core/mappingHelpers.ts:undefined:undefined",
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/stores/reasoningStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "flatMap",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es2019.array.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/stores/ontologyStore.test.ts:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "find",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es2015.core.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/SpecimenCanvasMapping.test.ts:undefined:undefined",
        "src/__tests__/components/SpecimenGoNode.test.ts:undefined:undefined",
        "src/__tests__/stores/completeRdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.fatmap.test.tsx:undefined:undefined",
        "src/__tests__/stores/ontologyStore.graphPreservation.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.remove.test.ts:undefined:undefined",
        "src/__tests__/utils/rdfParser.test.ts:undefined:undefined",
        "src/components/Canvas/AnnotationPropertyDialog.tsx:undefined:undefined",
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/LinkPropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/core/edgeLabel.ts:undefined:undefined",
        "src/components/Canvas/core/nodeDisplay.ts:undefined:undefined",
        "src/components/Canvas/helpers/nodePropertyHelpers.ts:undefined:undefined",
        "src/components/ui/AutoComplete.tsx:undefined:undefined",
        "src/components/ui/EntityAutocomplete.tsx:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/stores/reasoningStore.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined",
        "src/utils/termUtils.ts:undefined:undefined"
      ]
    },
    {
      "name": "addRecentOntology",
      "definedIn": [
        "src/stores/appConfigStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "isIriOrBNode",
      "definedIn": [
        "src/stores/ontologyStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "substring",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined",
        "src/utils/termUtils.ts:undefined:undefined"
      ]
    },
    {
      "name": "generateEdgeId",
      "definedIn": [
        "src/components/Canvas/KnowledgeCanvas.tsx",
        "src/components/Canvas/core/edgeHelpers.ts",
        "src/components/Canvas/core/mappingHelpers.ts",
        "src/stores/ontologyStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/core/edgeHelpers.ts:undefined:undefined",
        "src/components/Canvas/core/mappingHelpers.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "add",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts",
        "../../../node_modules/typescript/lib/lib.es2015.collection.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/helpers/namespaceHelpers.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/theme.ts:undefined:undefined"
      ]
    },
    {
      "name": "computeTermDisplay",
      "definedIn": [
        "src/__tests__/debug/load_additional_debug.test.ts",
        "src/components/Canvas/CustomOntologyNode.tsx",
        "src/components/Canvas/FloatingEdge.tsx",
        "src/components/Canvas/KnowledgeCanvas.tsx",
        "src/components/Canvas/core/edgeLabel.ts",
        "src/components/Canvas/core/nodeDisplay.ts",
        "src/components/ui/AutoComplete.tsx",
        "src/stores/ontologyStore.ts",
        "src/utils/termUtils.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/debug/load_additional_debug.test.ts:undefined:undefined",
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/FloatingEdge.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/core/edgeLabel.ts:undefined:undefined",
        "src/components/Canvas/core/nodeDisplay.ts:undefined:undefined",
        "src/components/ui/AutoComplete.tsx:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "warn",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts",
        "src/stores/ontologyStore.ts",
        "src/utils/startupDebug.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/ReasoningIndicator.tsx:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/stores/reasoningStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined",
        "src/utils/startupDebug.ts:undefined:undefined"
      ]
    },
    {
      "name": "onProgress",
      "definedIn": [
        "src/stores/ontologyStore.ts",
        "src/utils/rdfParser.ts"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "applyParsedNodes",
      "definedIn": [
        "src/utils/rdfManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "quad",
      "definedIn": [
        "src/__tests__/components/delete_node_and_edge.test.tsx",
        "src/__tests__/e2e/reactflow_edge_persistence.test.ts",
        "src/components/Canvas/LinkPropertyEditor.tsx",
        "src/components/Canvas/core/edgeHelpers.ts",
        "src/stores/ontologyStore.ts",
        "src/stores/reasoningStore.ts",
        "src/utils/rdfManager.ts",
        "src/utils/rdfParser.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/delete_node_and_edge.test.tsx:undefined:undefined",
        "src/__tests__/e2e/reactflow_edge_persistence.test.ts:undefined:undefined",
        "src/components/Canvas/LinkPropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/core/edgeHelpers.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/stores/reasoningStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "abort",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "fetch",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "parseInt",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "text",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "clearTimeout",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "loadOntologyFromRDF",
      "definedIn": [
        "src/components/Canvas/CanvasToolbar.tsx",
        "src/stores/ontologyStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/AutoComplete.ontology.test.tsx:undefined:undefined",
        "src/__tests__/e2e/demo_flow_single_triple_change.test.ts:undefined:undefined",
        "src/__tests__/stores/completeRdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.entityPreservation.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.graphPreservation.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfWorkflow.test.ts:undefined:undefined",
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "normalizeUri",
      "definedIn": [
        "src/stores/ontologyStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "floor",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/LayoutManager.ts:undefined:undefined",
        "src/components/ui/sidebar.tsx:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "loadOntology",
      "definedIn": [
        "src/components/Canvas/CanvasToolbar.tsx",
        "src/stores/ontologyStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/stores/ontologyStore.loadOntologyRdf.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.test.ts:undefined:undefined",
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "timeout",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "clear",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es2015.collection.d.ts",
        "src/utils/rdfManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/KnowledgeCanvas.preserve.test.tsx:undefined:undefined",
        "src/__tests__/e2e/reactflow_edge_persistence.unit.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.fatmap.test.tsx:undefined:undefined",
        "src/__tests__/stores/ontologyStore.remove.test.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "addDisabledOntology",
      "definedIn": [
        "src/stores/appConfigStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/stores/ontologyStore.autoloadDisabled.test.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "removeGraph",
      "definedIn": [
        "src/utils/rdfManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/utils/loadFixtureRdf.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "removeNamespaceAndQuads",
      "definedIn": [
        "src/utils/rdfManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "removeAdditionalOntology",
      "definedIn": [
        "src/components/Canvas/ConfigurationPanel.tsx",
        "src/stores/appConfigStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "catch",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "exportToTurtle",
      "definedIn": [
        "src/utils/rdfManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/stores/completeRdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/stores/demoDataLoad.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfWorkflow.test.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "exportToJsonLD",
      "definedIn": [
        "src/utils/rdfManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/stores/rdfWorkflow.test.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "exportToRdfXml",
      "definedIn": [
        "src/utils/rdfManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "expand",
      "definedIn": [
        "src/stores/ontologyStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "exec",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "pop",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined",
        "src/components/Canvas/LayoutManager.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/utils/termUtils.ts:undefined:undefined"
      ]
    },
    {
      "name": "decodeURIComponent",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "join",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/stores/ontologyStore.iofFetch.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.urlFormatDetection.test.ts:undefined:undefined",
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined",
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined",
        "src/components/ui/chart.tsx:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined",
        "src/utils/startupDebug.ts:undefined:undefined"
      ]
    },
    {
      "name": "toUpperCase",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "charAt",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "now",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/stores/reasoningStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/startupDebug.ts:undefined:undefined"
      ]
    },
    {
      "name": "random",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/sidebar.tsx:undefined:undefined",
        "src/stores/reasoningStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined",
        "src/utils/startupDebug.ts:undefined:undefined"
      ]
    },
    {
      "name": "shortLocalName",
      "definedIn": [
        "src/__tests__/components/AutoComplete.ontology.test.tsx",
        "src/__tests__/components/SpecimenBadge.test.tsx",
        "src/__tests__/components/SpecimenCanvasMapping.test.ts",
        "src/__tests__/components/SpecimenGoNode.test.ts",
        "src/components/Canvas/CustomOntologyNode.tsx",
        "src/components/Canvas/LinkPropertyEditor.tsx",
        "src/components/Canvas/core/edgeLabel.ts",
        "src/components/Canvas/core/mappingHelpers.ts",
        "src/components/Canvas/core/nodeDisplay.ts",
        "src/components/ui/AutoComplete.tsx",
        "src/stores/reasoningStore.ts",
        "src/utils/termUtils.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/AutoComplete.ontology.test.tsx:undefined:undefined",
        "src/__tests__/components/SpecimenBadge.test.tsx:undefined:undefined",
        "src/__tests__/components/SpecimenCanvasMapping.test.ts:undefined:undefined",
        "src/__tests__/components/SpecimenGoNode.test.ts:undefined:undefined",
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/LinkPropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/core/edgeLabel.ts:undefined:undefined",
        "src/components/Canvas/core/mappingHelpers.ts:undefined:undefined",
        "src/components/Canvas/core/nodeDisplay.ts:undefined:undefined",
        "src/components/ui/AutoComplete.tsx:undefined:undefined",
        "src/stores/reasoningStore.ts:undefined:undefined",
        "src/utils/termUtils.ts:undefined:undefined"
      ]
    },
    {
      "name": "resolveEdgeKey",
      "definedIn": [
        "src/stores/reasoningStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/stores/reasoningStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "findNodeByKey",
      "definedIn": [
        "src/stores/reasoningStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/stores/reasoningStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "displayLabelForNode",
      "definedIn": [
        "src/stores/reasoningStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/stores/reasoningStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "expandPredicate",
      "definedIn": [
        "src/stores/reasoningStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/stores/reasoningStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "literal",
      "definedIn": [
        "src/__tests__/components/delete_node_and_edge.test.tsx",
        "src/stores/reasoningStore.ts",
        "src/utils/rdfManager.ts",
        "src/utils/rdfParser.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/delete_node_and_edge.test.tsx:undefined:undefined",
        "src/stores/reasoningStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "RDFManager",
      "definedIn": [
        "src/utils/rdfManager.ts"
      ],
      "role": "",
      "callSites": []
    },
    {
      "name": "reduce",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "endsWith",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es2015.core.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/stores/ontologyStore.iofFetch.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.urlFormatDetection.test.ts:undefined:undefined",
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/core/mappingHelpers.ts:undefined:undefined",
        "src/components/Canvas/core/nodeDisplay.ts:undefined:undefined",
        "src/components/Canvas/helpers/namespaceHelpers.ts:undefined:undefined",
        "src/components/Canvas/helpers/nodePropertyHelpers.ts:undefined:undefined",
        "src/components/Canvas/helpers/paletteHelpers.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/termUtils.ts:undefined:undefined"
      ]
    },
    {
      "name": "origAdd",
      "definedIn": [
        "src/utils/rdfManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "origRemove",
      "definedIn": [
        "src/utils/rdfManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "enableWriteTracing",
      "definedIn": [
        "src/utils/rdfManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "cb",
      "definedIn": [
        "src/components/Canvas/CustomOntologyNode.tsx",
        "src/utils/rdfManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "isBlacklistedIri",
      "definedIn": [
        "src/components/Canvas/KnowledgeCanvas.tsx",
        "src/utils/rdfManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "scheduleSubjectFlush",
      "definedIn": [
        "src/utils/rdfManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "loadRDF",
      "definedIn": [
        "src/utils/rdfManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/NodePropertyEditor.resolveType.test.tsx:undefined:undefined",
        "src/__tests__/stores/completeRdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/stores/demoDataLoad.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.remove.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfManager.namespaces.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/utils/loadFixtureRdf.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "incr",
      "definedIn": [
        "src/utils/rdfManager.ts",
        "src/utils/startupDebug.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "debugLog",
      "definedIn": [
        "src/utils/rdfManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "notifyChange",
      "definedIn": [
        "src/utils/rdfManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "resolveFn",
      "definedIn": [
        "src/utils/rdfManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "bufferSubjectFromQuad",
      "definedIn": [
        "src/utils/rdfManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "finalize",
      "definedIn": [
        "src/utils/rdfManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "dispatchEvent",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "rejectFn",
      "definedIn": [
        "src/utils/rdfManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "finally",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es2018.promise.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "doFetch",
      "definedIn": [
        "src/utils/rdfManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "looksLikeRdf",
      "definedIn": [
        "src/utils/rdfManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "reject",
      "definedIn": [
        "src/utils/rdfManager.ts",
        "src/utils/rdfParser.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "resolve",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es2015.promise.d.ts",
        "src/utils/rdfManager.ts",
        "src/utils/rdfParser.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/CanvasToolbar.pasteRdf.test.tsx:undefined:undefined",
        "src/components/Canvas/LayoutManager.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "call",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "then",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "addNamespace",
      "definedIn": [
        "src/utils/rdfManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "RDFParser",
      "definedIn": [
        "src/utils/rdfParser.ts"
      ],
      "role": "",
      "callSites": []
    },
    {
      "name": "parseRdfXml",
      "definedIn": [
        "src/utils/rdfParser.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "extractGraph",
      "definedIn": [
        "src/utils/rdfParser.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "parseFromString",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "getElementsByTagName",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "getAttributeNS",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "getAttribute",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "getSubjectFromElement",
      "definedIn": [
        "src/utils/rdfParser.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "predicateUriFromElement",
      "definedIn": [
        "src/utils/rdfParser.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "splitUri",
      "definedIn": [
        "src/utils/rdfParser.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "lastIndexOf",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "createShortPrefix",
      "definedIn": [
        "src/utils/rdfParser.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "parseRDF",
      "definedIn": [
        "src/utils/rdfParser.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/utils/rdfParser.test.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "nowIso",
      "definedIn": [
        "src/utils/startupDebug.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/startupDebug.ts:undefined:undefined"
      ]
    },
    {
      "name": "ensureSummary",
      "definedIn": [
        "src/utils/startupDebug.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/startupDebug.ts:undefined:undefined"
      ]
    },
    {
      "name": "makeFingerprint",
      "definedIn": [
        "src/utils/startupDebug.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/startupDebug.ts:undefined:undefined"
      ]
    },
    {
      "name": "recordRecentEvent",
      "definedIn": [
        "src/utils/startupDebug.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/startupDebug.ts:undefined:undefined"
      ]
    },
    {
      "name": "captureFullStack",
      "definedIn": [
        "src/utils/startupDebug.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/startupDebug.ts:undefined:undefined"
      ]
    },
    {
      "name": "safeConsole",
      "definedIn": [
        "src/utils/startupDebug.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/startupDebug.ts:undefined:undefined"
      ]
    },
    {
      "name": "shortCaller",
      "definedIn": [
        "src/utils/startupDebug.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/startupDebug.ts:undefined:undefined"
      ]
    },
    {
      "name": "milestone",
      "definedIn": [
        "src/utils/startupDebug.ts"
      ],
      "role": "",
      "callSites": []
    },
    {
      "name": "log",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts",
        "src/utils/startupDebug.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/NodePropertyEditor.test.tsx:undefined:undefined",
        "src/__tests__/stores/completeRdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfWorkflow.test.ts:undefined:undefined",
        "src/utils/startupDebug.ts:undefined:undefined"
      ]
    },
    {
      "name": "info",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts",
        "src/utils/startupDebug.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/startupDebug.ts:undefined:undefined"
      ]
    },
    {
      "name": "timedAsync",
      "definedIn": [
        "src/utils/startupDebug.ts"
      ],
      "role": "",
      "callSites": []
    },
    {
      "name": "getSummary",
      "definedIn": [
        "src/utils/startupDebug.ts"
      ],
      "role": "",
      "callSites": []
    },
    {
      "name": "toISOString",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/utils/startupDebug.ts:undefined:undefined"
      ]
    },
    {
      "name": "shift",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/startupDebug.ts:undefined:undefined"
      ]
    },
    {
      "name": "resolveNamespaces",
      "definedIn": [
        "src/utils/termUtils.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/termUtils.ts:undefined:undefined"
      ]
    },
    {
      "name": "findPrefixForUri",
      "definedIn": [
        "src/utils/termUtils.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/termUtils.ts:undefined:undefined"
      ]
    },
    {
      "name": "toPrefixed",
      "definedIn": [
        "src/utils/termUtils.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/termUtils.ts:undefined:undefined"
      ]
    },
    {
      "name": "expandPrefixed",
      "definedIn": [
        "src/components/Canvas/core/nodeDisplay.ts",
        "src/utils/termUtils.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/core/nodeDisplay.ts:undefined:undefined",
        "src/utils/termUtils.ts:undefined:undefined"
      ]
    },
    {
      "name": "sort",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined",
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined",
        "src/utils/termUtils.ts:undefined:undefined"
      ]
    },
    {
      "name": "norm",
      "definedIn": [
        "src/utils/termUtils.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/termUtils.ts:undefined:undefined"
      ]
    },
    {
      "name": "getPropertyValue",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined",
        "src/utils/termUtils.ts:undefined:undefined"
      ]
    },
    {
      "name": "getComputedStyle",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined",
        "src/utils/termUtils.ts:undefined:undefined"
      ]
    },
    {
      "name": "buildPaletteMap",
      "definedIn": [
        "src/components/Canvas/core/namespacePalette.ts",
        "src/utils/termUtils.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined",
        "src/utils/termUtils.ts:undefined:undefined"
      ]
    },
    {
      "name": "getStoredTheme",
      "definedIn": [
        "src/utils/theme.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/theme.ts:undefined:undefined"
      ]
    },
    {
      "name": "prefersSystemDark",
      "definedIn": [
        "src/utils/theme.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/theme.ts:undefined:undefined"
      ]
    },
    {
      "name": "applyTheme",
      "definedIn": [
        "src/utils/theme.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/theme.ts:undefined:undefined"
      ]
    },
    {
      "name": "getItem",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/theme.ts:undefined:undefined"
      ]
    },
    {
      "name": "remove",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/theme.ts:undefined:undefined"
      ]
    },
    {
      "name": "setAttribute",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/theme.ts:undefined:undefined"
      ]
    },
    {
      "name": "setItem",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/theme.ts:undefined:undefined"
      ]
    },
    {
      "name": "fromEntries",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es2019.object.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/utils/wellKnownOntologies.ts:undefined:undefined"
      ]
    },
    {
      "name": "beforeEach",
      "definedIn": [
        "src/__tests__/callgraph/duplicate-calls.test.ts",
        "src/__tests__/components/CanvasToolbar.pasteRdf.test.tsx",
        "src/__tests__/components/KnowledgeCanvas.autoload.test.tsx",
        "src/__tests__/components/KnowledgeCanvas.preserve.test.tsx",
        "src/__tests__/components/NodePropertyEditor.resolveType.test.tsx",
        "src/__tests__/components/NodePropertyEditor.test.tsx",
        "src/__tests__/components/delete_node_and_edge.test.tsx",
        "src/__tests__/e2e/demo_flow_single_triple_change.test.ts",
        "src/__tests__/e2e/reactflow_edge_persistence.test.ts",
        "src/__tests__/e2e/reactflow_edge_persistence.unit.test.ts",
        "src/__tests__/stores/completeRdfWorkflow.test.ts",
        "src/__tests__/stores/ontologyStore.autoloadDisabled.test.ts",
        "src/__tests__/stores/ontologyStore.entityPreservation.test.ts",
        "src/__tests__/stores/ontologyStore.fatmap.test.tsx",
        "src/__tests__/stores/ontologyStore.graphPreservation.test.ts",
        "src/__tests__/stores/ontologyStore.remove.test.ts",
        "src/__tests__/stores/ontologyStore.test.ts",
        "src/__tests__/stores/rdfManager.applyParsedNodes.absoluteIri.test.ts",
        "src/__tests__/stores/rdfWorkflow.test.ts",
        "src/__tests__/utils/graphExporter.test.ts",
        "src/__tests__/utils/rdfParser.test.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/callgraph/duplicate-calls.test.ts:undefined:undefined",
        "src/__tests__/components/CanvasToolbar.pasteRdf.test.tsx:undefined:undefined",
        "src/__tests__/components/KnowledgeCanvas.autoload.test.tsx:undefined:undefined",
        "src/__tests__/components/KnowledgeCanvas.preserve.test.tsx:undefined:undefined",
        "src/__tests__/components/NodePropertyEditor.resolveType.test.tsx:undefined:undefined",
        "src/__tests__/components/NodePropertyEditor.test.tsx:undefined:undefined",
        "src/__tests__/components/delete_node_and_edge.test.tsx:undefined:undefined",
        "src/__tests__/e2e/demo_flow_single_triple_change.test.ts:undefined:undefined",
        "src/__tests__/e2e/reactflow_edge_persistence.test.ts:undefined:undefined",
        "src/__tests__/e2e/reactflow_edge_persistence.unit.test.ts:undefined:undefined",
        "src/__tests__/stores/completeRdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.autoloadDisabled.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.entityPreservation.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.fatmap.test.tsx:undefined:undefined",
        "src/__tests__/stores/ontologyStore.graphPreservation.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.remove.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfManager.applyParsedNodes.absoluteIri.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/utils/graphExporter.test.ts:undefined:undefined",
        "src/__tests__/utils/rdfParser.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "clearOntologies",
      "definedIn": [
        "src/stores/ontologyStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/callgraph/duplicate-calls.test.ts:undefined:undefined",
        "src/__tests__/components/AutoComplete.ontology.test.tsx:undefined:undefined",
        "src/__tests__/e2e/demo_flow_single_triple_change.test.ts:undefined:undefined",
        "src/__tests__/e2e/reactflow_edge_persistence.test.ts:undefined:undefined",
        "src/__tests__/stores/completeRdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.autoloadDisabled.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.entityPreservation.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.fatmap.test.tsx:undefined:undefined",
        "src/__tests__/stores/ontologyStore.graphPreservation.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.iofFetch.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.loadOntologyRdf.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.remove.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.urlFormatDetection.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/utils/graphExporter.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "toBeTruthy",
      "definedIn": [
        "node_modules/@vitest/expect/dist/index.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/callgraph/duplicate-calls.test.ts:undefined:undefined",
        "src/__tests__/components/AutoComplete.ontology.test.tsx:undefined:undefined",
        "src/__tests__/components/NodePropertyEditor.resolveType.test.tsx:undefined:undefined",
        "src/__tests__/components/NodePropertyEditor.test.tsx:undefined:undefined",
        "src/__tests__/e2e/reactflow_edge_persistence.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.fatmap.test.tsx:undefined:undefined"
      ]
    },
    {
      "name": "originalParse",
      "definedIn": [
        "src/__tests__/callgraph/duplicate-calls.test.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/callgraph/duplicate-calls.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "all",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es2015.iterable.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/callgraph/duplicate-calls.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "loadKnowledgeGraph",
      "definedIn": [
        "src/components/Canvas/KnowledgeCanvas.tsx",
        "src/stores/ontologyStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/callgraph/duplicate-calls.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.autoloadDisabled.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.iofFetch.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.urlFormatDetection.test.ts:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "getByRole",
      "definedIn": [
        "node_modules/@testing-library/dom/types/get-queries-for-element.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/AutoComplete.ontology.test.tsx:undefined:undefined",
        "src/__tests__/components/NodePropertyEditor.resolveType.test.tsx:undefined:undefined"
      ]
    },
    {
      "name": "click",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts",
        "src/__tests__/components/AutoComplete.ontology.test.tsx",
        "src/__tests__/components/CanvasToolbar.pasteRdf.test.tsx",
        "src/__tests__/components/delete_node_and_edge.test.tsx"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/AutoComplete.ontology.test.tsx:undefined:undefined",
        "src/__tests__/components/CanvasToolbar.pasteRdf.test.tsx:undefined:undefined",
        "src/__tests__/components/delete_node_and_edge.test.tsx:undefined:undefined",
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "findByPlaceholderText",
      "definedIn": [
        "node_modules/@testing-library/dom/types/get-queries-for-element.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/AutoComplete.ontology.test.tsx:undefined:undefined"
      ]
    },
    {
      "name": "change",
      "definedIn": [
        "src/__tests__/components/AutoComplete.ontology.test.tsx",
        "src/__tests__/components/CanvasToolbar.pasteRdf.test.tsx"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/AutoComplete.ontology.test.tsx:undefined:undefined",
        "src/__tests__/components/CanvasToolbar.pasteRdf.test.tsx:undefined:undefined"
      ]
    },
    {
      "name": "getByText",
      "definedIn": [
        "node_modules/@testing-library/dom/types/get-queries-for-element.d.ts",
        "src/__tests__/components/CanvasToolbar.pasteRdf.test.tsx"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/AutoComplete.ontology.test.tsx:undefined:undefined",
        "src/__tests__/components/CanvasToolbar.pasteRdf.test.tsx:undefined:undefined"
      ]
    },
    {
      "name": "getByPlaceholderText",
      "definedIn": [
        "src/__tests__/components/CanvasToolbar.pasteRdf.test.tsx"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/CanvasToolbar.pasteRdf.test.tsx:undefined:undefined"
      ]
    },
    {
      "name": "restoreAllMocks",
      "definedIn": [
        "node_modules/vitest/dist/index.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/delete_node_and_edge.test.tsx:undefined:undefined",
        "src/__tests__/stores/ontologyStore.iofFetch.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.urlFormatDetection.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "stubGlobal",
      "definedIn": [
        "node_modules/vitest/dist/index.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/delete_node_and_edge.test.tsx:undefined:undefined"
      ]
    },
    {
      "name": "findByRole",
      "definedIn": [
        "node_modules/@testing-library/dom/types/get-queries-for-element.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/delete_node_and_edge.test.tsx:undefined:undefined"
      ]
    },
    {
      "name": "toBeUndefined",
      "definedIn": [
        "node_modules/@vitest/expect/dist/index.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/delete_node_and_edge.test.tsx:undefined:undefined",
        "src/__tests__/stores/ontologyStore.remove.test.ts:undefined:undefined",
        "src/__tests__/utils/nodeDisplay.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "computeDisplayInfo",
      "definedIn": [
        "src/__tests__/components/DisplayLifecycle.test.ts",
        "src/__tests__/components/SpecimenBadge.test.tsx",
        "src/__tests__/components/SpecimenCanvasMapping.test.ts",
        "src/__tests__/components/SpecimenGoNode.test.ts",
        "src/__tests__/utils/nodeDisplay.test.ts",
        "src/components/Canvas/core/TemplateManager.ts",
        "src/components/Canvas/core/nodeDisplay.ts",
        "src/components/Canvas/helpers/diagramHelpers.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/DisplayLifecycle.test.ts:undefined:undefined",
        "src/__tests__/components/SpecimenBadge.test.tsx:undefined:undefined",
        "src/__tests__/components/SpecimenCanvasMapping.test.ts:undefined:undefined",
        "src/__tests__/components/SpecimenGoNode.test.ts:undefined:undefined",
        "src/__tests__/utils/nodeDisplay.test.ts:undefined:undefined",
        "src/components/Canvas/core/TemplateManager.ts:undefined:undefined",
        "src/components/Canvas/helpers/diagramHelpers.ts:undefined:undefined"
      ]
    },
    {
      "name": "toBeDefined",
      "definedIn": [
        "node_modules/@vitest/expect/dist/index.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/DisplayLifecycle.test.ts:undefined:undefined",
        "src/__tests__/components/SpecimenBadge.abox.test.tsx:undefined:undefined",
        "src/__tests__/components/SpecimenBadge.test.tsx:undefined:undefined",
        "src/__tests__/components/SpecimenCanvasMapping.test.ts:undefined:undefined",
        "src/__tests__/components/SpecimenGoNode.test.ts:undefined:undefined",
        "src/__tests__/components/SpecimenTemplateManager.test.ts:undefined:undefined",
        "src/__tests__/stores/completeRdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.graphPreservation.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.loadOntologyRdf.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.test.ts:undefined:undefined",
        "src/__tests__/utils/graphExporter.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "act",
      "definedIn": [
        "src/__tests__/components/KnowledgeCanvas.preserve.test.tsx"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/KnowledgeCanvas.preserve.test.tsx:undefined:undefined"
      ]
    },
    {
      "name": "requestAnimationFrame",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/KnowledgeCanvas.preserve.test.tsx:undefined:undefined"
      ]
    },
    {
      "name": "res",
      "definedIn": [
        "src/__tests__/components/KnowledgeCanvas.preserve.test.tsx"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/KnowledgeCanvas.preserve.test.tsx:undefined:undefined"
      ]
    },
    {
      "name": "toBeGreaterThanOrEqual",
      "definedIn": [
        "node_modules/@vitest/expect/dist/index.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/KnowledgeCanvas.preserve.test.tsx:undefined:undefined",
        "src/__tests__/e2e/reactflow_edge_persistence.unit.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.loadOntologyRdf.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "toMatch",
      "definedIn": [
        "node_modules/@vitest/expect/dist/index.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/NodePropertyEditor.resolveType.test.tsx:undefined:undefined",
        "src/__tests__/stores/ontologyStore.iofFetch.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.urlFormatDetection.test.ts:undefined:undefined",
        "src/__tests__/utils/graphExporter.test.ts:undefined:undefined",
        "src/__tests__/utils/rdfParser.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "mock",
      "definedIn": [
        "node_modules/vitest/dist/index.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/NodePropertyEditor.test.tsx:undefined:undefined"
      ]
    },
    {
      "name": "clearAllMocks",
      "definedIn": [
        "node_modules/vitest/dist/index.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/NodePropertyEditor.test.tsx:undefined:undefined"
      ]
    },
    {
      "name": "computeBadgeText",
      "definedIn": [
        "src/__tests__/components/SpecimenBadge.abox.test.tsx",
        "src/components/Canvas/CustomOntologyNode.tsx",
        "src/components/Canvas/core/nodeDisplay.ts",
        "src/components/Canvas/helpers/diagramHelpers.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/SpecimenBadge.abox.test.tsx:undefined:undefined",
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/helpers/diagramHelpers.ts:undefined:undefined"
      ]
    },
    {
      "name": "loadAdditionalOntologies",
      "definedIn": [
        "src/components/Canvas/KnowledgeCanvas.tsx",
        "src/stores/ontologyStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/debug/load_additional_debug.test.ts:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "getRdfManager",
      "definedIn": [
        "src/components/Canvas/CanvasToolbar.tsx",
        "src/components/Canvas/ConfigurationPanel.tsx",
        "src/components/Canvas/KnowledgeCanvas.tsx",
        "src/stores/ontologyStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/debug/load_additional_debug.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.iofFetch.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.loadOntologyRdf.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.urlFormatDetection.test.ts:undefined:undefined",
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/core/TemplateManager.ts:undefined:undefined",
        "src/components/ui/AutoComplete.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setCurrentGraph",
      "definedIn": [
        "src/stores/ontologyStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/e2e/demo_flow_single_triple_change.test.ts:undefined:undefined",
        "src/__tests__/e2e/reactflow_edge_persistence.test.ts:undefined:undefined",
        "src/__tests__/e2e/reactflow_edge_persistence.unit.test.ts:undefined:undefined",
        "src/__tests__/stores/completeRdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.entityPreservation.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.graphPreservation.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfWorkflow.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "exportGraph",
      "definedIn": [
        "src/components/Canvas/KnowledgeCanvas.tsx",
        "src/stores/ontologyStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/e2e/demo_flow_single_triple_change.test.ts:undefined:undefined",
        "src/__tests__/stores/completeRdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/utils/graphExporter.test.ts:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "toHaveLength",
      "definedIn": [
        "node_modules/@vitest/expect/dist/index.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/stores/completeRdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.graphPreservation.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/utils/rdfParser.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "toHaveProperty",
      "definedIn": [
        "node_modules/@vitest/expect/dist/index.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/stores/completeRdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.graphPreservation.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfManager.applyParsedNodes.absoluteIri.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfManager.namespaces.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfWorkflow.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "resetToDefaults",
      "definedIn": [
        "src/components/Canvas/ConfigurationPanel.tsx",
        "src/stores/appConfigStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/stores/ontologyStore.autoloadDisabled.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.remove.test.ts:undefined:undefined",
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined"
      ]
    },
    {
      "name": "queryByText",
      "definedIn": [
        "node_modules/@testing-library/dom/types/get-queries-for-element.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/stores/ontologyStore.fatmap.test.tsx:undefined:undefined"
      ]
    },
    {
      "name": "addAdditionalOntology",
      "definedIn": [
        "src/components/Canvas/ConfigurationPanel.tsx",
        "src/stores/appConfigStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/stores/ontologyStore.remove.test.ts:undefined:undefined",
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined"
      ]
    },
    {
      "name": "removeLoadedOntology",
      "definedIn": [
        "src/components/Canvas/ConfigurationPanel.tsx",
        "src/stores/ontologyStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/stores/ontologyStore.remove.test.ts:undefined:undefined",
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined"
      ]
    },
    {
      "name": "validateGraph",
      "definedIn": [
        "src/stores/ontologyStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/stores/ontologyStore.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "getCompatibleProperties",
      "definedIn": [
        "src/stores/ontologyStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/stores/ontologyStore.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "toEqual",
      "definedIn": [
        "node_modules/@vitest/expect/dist/index.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/stores/ontologyStore.test.ts:undefined:undefined",
        "src/__tests__/utils/nodeDisplay.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "startReasoning",
      "definedIn": [
        "src/stores/reasoningStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/stores/rdfWorkflow.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "loadFixtureRdf",
      "definedIn": [
        "src/__tests__/utils/graphExporter.test.ts",
        "src/__tests__/utils/loadFixtureRdf.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/utils/graphExporter.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "toBeInstanceOf",
      "definedIn": [
        "node_modules/@vitest/expect/dist/index.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/utils/graphExporter.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "toContainEqual",
      "definedIn": [
        "node_modules/@vitest/expect/dist/index.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/utils/rdfParser.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "setProperties",
      "definedIn": [
        "src/components/Canvas/AnnotationPropertyDialog.tsx",
        "src/components/Canvas/NodePropertyEditor.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/AnnotationPropertyDialog.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setNewPropertyUri",
      "definedIn": [
        "src/components/Canvas/AnnotationPropertyDialog.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/AnnotationPropertyDialog.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setNewPropertyValue",
      "definedIn": [
        "src/components/Canvas/AnnotationPropertyDialog.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/AnnotationPropertyDialog.tsx:undefined:undefined"
      ]
    },
    {
      "name": "onSave",
      "definedIn": [
        "src/components/Canvas/AnnotationPropertyDialog.tsx",
        "src/components/Canvas/LinkPropertyEditor.tsx",
        "src/components/Canvas/NodePropertyEditor.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/AnnotationPropertyDialog.tsx:undefined:undefined",
        "src/components/Canvas/LinkPropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setOpen",
      "definedIn": [
        "src/components/Canvas/AnnotationPropertyDialog.tsx",
        "src/components/ui/AutoComplete.tsx",
        "src/components/ui/EntityAutocomplete.tsx",
        "src/components/ui/sidebar.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/AnnotationPropertyDialog.tsx:undefined:undefined",
        "src/components/ui/AutoComplete.tsx:undefined:undefined",
        "src/components/ui/EntityAutocomplete.tsx:undefined:undefined",
        "src/components/ui/sidebar.tsx:undefined:undefined"
      ]
    },
    {
      "name": "success",
      "definedIn": [
        "node_modules/sonner/dist/index.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/AnnotationPropertyDialog.tsx:undefined:undefined",
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "handleRemoveProperty",
      "definedIn": [
        "src/components/Canvas/AnnotationPropertyDialog.tsx",
        "src/components/Canvas/NodePropertyEditor.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/AnnotationPropertyDialog.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined"
      ]
    },
    {
      "name": "useOntologyStore",
      "definedIn": [
        "src/components/Canvas/CanvasToolbar.tsx",
        "src/components/Canvas/ConfigurationPanel.tsx",
        "src/components/Canvas/CustomOntologyNode.tsx",
        "src/components/Canvas/KnowledgeCanvas.tsx",
        "src/components/Canvas/LinkPropertyEditor.tsx",
        "src/components/Canvas/NodePropertyEditor.tsx",
        "src/components/Canvas/ResizableNamespaceLegend.tsx",
        "src/components/Canvas/core/namespacePalette.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined",
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/LinkPropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined",
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined"
      ]
    },
    {
      "name": "isCoreUrl",
      "definedIn": [
        "src/components/Canvas/CanvasToolbar.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined"
      ]
    },
    {
      "name": "normalizeForCompare",
      "definedIn": [
        "src/components/Canvas/CanvasToolbar.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined"
      ]
    },
    {
      "name": "useMemo",
      "definedIn": [
        "node_modules/@types/react/index.d.ts",
        "src/components/Canvas/CanvasToolbar.tsx",
        "src/components/Canvas/CustomOntologyNode.tsx",
        "src/components/Canvas/KnowledgeCanvas.tsx",
        "src/components/Canvas/LinkPropertyEditor.tsx",
        "src/components/Canvas/NodePropertyEditor.tsx",
        "src/components/Canvas/ResizableNamespaceLegend.tsx",
        "src/components/Canvas/core/namespacePalette.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/LinkPropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined",
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined",
        "src/components/ui/chart.tsx:undefined:undefined",
        "src/components/ui/sidebar.tsx:undefined:undefined"
      ]
    },
    {
      "name": "getAvailableLayouts",
      "definedIn": [
        "src/components/Canvas/LayoutManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setTempLayoutSpacing",
      "definedIn": [
        "src/components/Canvas/CanvasToolbar.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined"
      ]
    },
    {
      "name": "onLayoutChange",
      "definedIn": [
        "src/components/Canvas/CanvasToolbar.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setOntologyUrl",
      "definedIn": [
        "src/components/Canvas/CanvasToolbar.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setIsLoadOntologyOpen",
      "definedIn": [
        "src/components/Canvas/CanvasToolbar.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined"
      ]
    },
    {
      "name": "onAddNode",
      "definedIn": [
        "src/components/Canvas/CanvasToolbar.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setNewNodeClass",
      "definedIn": [
        "src/components/Canvas/CanvasToolbar.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setNewNodeNamespace",
      "definedIn": [
        "src/components/Canvas/CanvasToolbar.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setNewNodeIri",
      "definedIn": [
        "src/components/Canvas/CanvasToolbar.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setIsAddNodeOpen",
      "definedIn": [
        "src/components/Canvas/CanvasToolbar.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined"
      ]
    },
    {
      "name": "normalizeNamespaceKey",
      "definedIn": [
        "src/components/Canvas/CanvasToolbar.tsx",
        "src/components/Canvas/helpers/namespaceHelpers.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/helpers/namespaceHelpers.ts:undefined:undefined"
      ]
    },
    {
      "name": "localeCompare",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined",
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined"
      ]
    },
    {
      "name": "setRdfBody",
      "definedIn": [
        "src/components/Canvas/CanvasToolbar.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined"
      ]
    },
    {
      "name": "onViewModeChange",
      "definedIn": [
        "src/components/Canvas/CanvasToolbar.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined"
      ]
    },
    {
      "name": "getLayoutIcon",
      "definedIn": [
        "src/components/Canvas/CanvasToolbar.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setLayoutSpacing",
      "definedIn": [
        "src/components/Canvas/CanvasToolbar.tsx",
        "src/stores/appConfigStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "onToggleLayoutEnabled",
      "definedIn": [
        "src/components/Canvas/CanvasToolbar.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setFileSource",
      "definedIn": [
        "src/components/Canvas/CanvasToolbar.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined"
      ]
    },
    {
      "name": "onLoadFile",
      "definedIn": [
        "src/components/Canvas/CanvasToolbar.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setIsLoadFileOpen",
      "definedIn": [
        "src/components/Canvas/CanvasToolbar.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined"
      ]
    },
    {
      "name": "onExport",
      "definedIn": [
        "src/components/Canvas/CanvasToolbar.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined"
      ]
    },
    {
      "name": "canonical",
      "definedIn": [
        "src/components/Canvas/CanvasToolbar.tsx",
        "src/components/Canvas/ConfigurationPanel.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setBlacklistEnabledLocal",
      "definedIn": [
        "src/components/Canvas/ConfigurationPanel.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setPrefixesText",
      "definedIn": [
        "src/components/Canvas/ConfigurationPanel.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setUrisText",
      "definedIn": [
        "src/components/Canvas/ConfigurationPanel.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined"
      ]
    },
    {
      "name": "exportConfig",
      "definedIn": [
        "src/components/Canvas/ConfigurationPanel.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined"
      ]
    },
    {
      "name": "writeText",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined"
      ]
    },
    {
      "name": "importConfig",
      "definedIn": [
        "src/components/Canvas/ConfigurationPanel.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setImportText",
      "definedIn": [
        "src/components/Canvas/ConfigurationPanel.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setCurrentLayout",
      "definedIn": [
        "src/components/Canvas/ConfigurationPanel.tsx",
        "src/components/Canvas/KnowledgeCanvas.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setMaxVisibleNodes",
      "definedIn": [
        "src/components/Canvas/ConfigurationPanel.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setBlacklistEnabled",
      "definedIn": [
        "src/components/Canvas/ConfigurationPanel.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setBlacklistedPrefixes",
      "definedIn": [
        "src/components/Canvas/ConfigurationPanel.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setBlacklistedUris",
      "definedIn": [
        "src/components/Canvas/ConfigurationPanel.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined"
      ]
    },
    {
      "name": "CustomOntologyNodeInner",
      "definedIn": [
        "src/components/Canvas/CustomOntologyNode.tsx"
      ],
      "role": "",
      "callSites": []
    },
    {
      "name": "darken",
      "definedIn": [
        "src/components/Canvas/CustomOntologyNode.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined"
      ]
    },
    {
      "name": "useConnection",
      "definedIn": [
        "src/components/Canvas/CustomOntologyNode.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined"
      ]
    },
    {
      "name": "useUpdateNodeInternals",
      "definedIn": [
        "src/components/Canvas/CustomOntologyNode.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined"
      ]
    },
    {
      "name": "updateNodeInternals",
      "definedIn": [
        "src/components/Canvas/CustomOntologyNode.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined"
      ]
    },
    {
      "name": "useRef",
      "definedIn": [
        "src/components/Canvas/CustomOntologyNode.tsx",
        "src/components/Canvas/KnowledgeCanvas.tsx",
        "src/components/Canvas/NodePropertyEditor.tsx",
        "src/components/Canvas/ResizableNamespaceLegend.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined"
      ]
    },
    {
      "name": "usePaletteFromRdfManager",
      "definedIn": [
        "src/components/Canvas/CustomOntologyNode.tsx",
        "src/components/Canvas/FloatingEdge.tsx",
        "src/components/Canvas/KnowledgeCanvas.tsx",
        "src/components/Canvas/ResizableNamespaceLegend.tsx",
        "src/components/Canvas/core/namespacePalette.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/FloatingEdge.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined"
      ]
    },
    {
      "name": "getNamespaceColorFromPalette",
      "definedIn": [
        "src/components/Canvas/CustomOntologyNode.tsx",
        "src/components/Canvas/helpers/namespaceHelpers.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setIndividualName",
      "definedIn": [
        "src/components/Canvas/CustomOntologyNode.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined"
      ]
    },
    {
      "name": "abs",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/EdgeParams.tsx:undefined:undefined"
      ]
    },
    {
      "name": "round",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/EdgeParams.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/ReasoningReportModal.tsx:undefined:undefined",
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined",
        "src/components/Canvas/layout/dagreLayout.ts:undefined:undefined"
      ]
    },
    {
      "name": "report",
      "definedIn": [
        "src/components/Canvas/CustomOntologyNode.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined"
      ]
    },
    {
      "name": "observe",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined"
      ]
    },
    {
      "name": "disconnect",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setProperty",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined"
      ]
    },
    {
      "name": "removeProperty",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined"
      ]
    },
    {
      "name": "memo",
      "definedIn": [
        "src/components/Canvas/CustomOntologyNode.tsx",
        "src/components/Canvas/FloatingEdge.tsx",
        "src/components/Canvas/NamespaceLegendCore.tsx",
        "src/components/Canvas/ReasoningIndicator.tsx",
        "src/components/Canvas/ReasoningReportModal.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/FloatingEdge.tsx:undefined:undefined",
        "src/components/Canvas/NamespaceLegendCore.tsx:undefined:undefined",
        "src/components/Canvas/ReasoningIndicator.tsx:undefined:undefined",
        "src/components/Canvas/ReasoningReportModal.tsx:undefined:undefined"
      ]
    },
    {
      "name": "getNodeIntersection",
      "definedIn": [
        "src/components/Canvas/EdgeParams.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/EdgeParams.tsx:undefined:undefined"
      ]
    },
    {
      "name": "getEdgePosition",
      "definedIn": [
        "src/components/Canvas/EdgeParams.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/EdgeParams.tsx:undefined:undefined"
      ]
    },
    {
      "name": "getEdgeParams",
      "definedIn": [
        "src/components/Canvas/EdgeParams.tsx",
        "src/components/Canvas/FloatingConnectionLine.tsx",
        "src/components/Canvas/FloatingEdge.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/FloatingConnectionLine.tsx:undefined:undefined",
        "src/components/Canvas/FloatingEdge.tsx:undefined:undefined"
      ]
    },
    {
      "name": "initialElements",
      "definedIn": [
        "src/components/Canvas/EdgeParams.tsx"
      ],
      "role": "",
      "callSites": []
    },
    {
      "name": "cos",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/EdgeParams.tsx:undefined:undefined"
      ]
    },
    {
      "name": "sin",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/EdgeParams.tsx:undefined:undefined"
      ]
    },
    {
      "name": "getBezierPath",
      "definedIn": [
        "src/components/Canvas/FloatingConnectionLine.tsx",
        "src/components/Canvas/FloatingEdge.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/FloatingConnectionLine.tsx:undefined:undefined",
        "src/components/Canvas/FloatingEdge.tsx:undefined:undefined"
      ]
    },
    {
      "name": "useInternalNode",
      "definedIn": [
        "src/components/Canvas/FloatingEdge.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/FloatingEdge.tsx:undefined:undefined"
      ]
    },
    {
      "name": "every",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/FloatingEdge.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined"
      ]
    },
    {
      "name": "isFinite",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es2015.core.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/FloatingEdge.tsx:undefined:undefined"
      ]
    },
    {
      "name": "useNodesState",
      "definedIn": [
        "src/components/Canvas/KnowledgeCanvas.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "useEdgesState",
      "definedIn": [
        "src/components/Canvas/KnowledgeCanvas.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "useCanvasState",
      "definedIn": [
        "src/components/Canvas/KnowledgeCanvas.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "useReasoningStore",
      "definedIn": [
        "src/components/Canvas/KnowledgeCanvas.tsx",
        "src/components/Canvas/ReasoningIndicator.tsx",
        "src/components/Canvas/ReasoningReportModal.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/ReasoningIndicator.tsx:undefined:undefined",
        "src/components/Canvas/ReasoningReportModal.tsx:undefined:undefined"
      ]
    },
    {
      "name": "useSettingsStore",
      "definedIn": [
        "src/components/Canvas/KnowledgeCanvas.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setLayoutEnabled",
      "definedIn": [
        "src/components/Canvas/KnowledgeCanvas.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setAutoApplyLayout",
      "definedIn": [
        "src/stores/appConfigStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setViewMode",
      "definedIn": [
        "src/components/Canvas/KnowledgeCanvas.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setShowLegendState",
      "definedIn": [
        "src/components/Canvas/KnowledgeCanvas.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setCurrentLayoutState",
      "definedIn": [
        "src/components/Canvas/KnowledgeCanvas.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setNodes",
      "definedIn": [
        "src/components/Canvas/KnowledgeCanvas.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "suggestOptimalLayout",
      "definedIn": [
        "src/components/Canvas/LayoutManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/LayoutManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "applyLayout",
      "definedIn": [
        "src/components/Canvas/LayoutManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "doLayout",
      "definedIn": [
        "src/components/Canvas/KnowledgeCanvas.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setPersistedViewMode",
      "definedIn": [
        "src/components/Canvas/KnowledgeCanvas.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "createObjectURL",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "createElement",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "appendChild",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "removeChild",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "revokeObjectURL",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setLoading",
      "definedIn": [
        "src/types/canvas.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "mapQuadsToDiagram",
      "definedIn": [
        "src/components/Canvas/KnowledgeCanvas.tsx",
        "src/components/Canvas/core/mappingHelpers.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "isOntologyGraph",
      "definedIn": [
        "src/components/Canvas/KnowledgeCanvas.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "reconcileQuads",
      "definedIn": [
        "src/stores/ontologyStore.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "translateQuadsToDiagram",
      "definedIn": [
        "src/components/Canvas/KnowledgeCanvas.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setEdges",
      "definedIn": [
        "src/components/Canvas/KnowledgeCanvas.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "runMapping",
      "definedIn": [
        "src/components/Canvas/KnowledgeCanvas.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "scheduleRunMapping",
      "definedIn": [
        "src/components/Canvas/KnowledgeCanvas.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "onSubjectsChange",
      "definedIn": [
        "src/utils/rdfManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "schedule",
      "definedIn": [
        "src/components/Canvas/KnowledgeCanvas.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "onChange",
      "definedIn": [
        "src/utils/rdfManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "offSubjectsChange",
      "definedIn": [
        "src/utils/rdfManager.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "findNode",
      "definedIn": [
        "src/components/Canvas/KnowledgeCanvas.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "current",
      "definedIn": [
        "node_modules/@types/react/index.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "termForIri",
      "definedIn": [
        "src/components/Canvas/KnowledgeCanvas.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "handleToggleLegend",
      "definedIn": [
        "src/components/Canvas/KnowledgeCanvas.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "toggleNodeEditor",
      "definedIn": [
        "src/types/canvas.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "LayoutManager",
      "definedIn": [
        "src/components/Canvas/LayoutManager.ts"
      ],
      "role": "",
      "callSites": []
    },
    {
      "name": "applyDagreLayout",
      "definedIn": [
        "src/components/Canvas/LayoutManager.ts",
        "src/components/Canvas/layout/dagreLayout.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/LayoutManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "ceil",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/LayoutManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "sqrt",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/LayoutManager.ts:undefined:undefined",
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined"
      ]
    },
    {
      "name": "setSelectedProperty",
      "definedIn": [
        "src/components/Canvas/LinkPropertyEditor.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/LinkPropertyEditor.tsx:undefined:undefined"
      ]
    },
    {
      "name": "onOpenChange",
      "definedIn": [
        "src/components/Canvas/LinkPropertyEditor.tsx",
        "src/components/Canvas/NodePropertyEditor.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/LinkPropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined"
      ]
    },
    {
      "name": "confirm",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/LinkPropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined"
      ]
    },
    {
      "name": "format",
      "definedIn": [
        "src/components/Canvas/LinkPropertyEditor.tsx",
        "src/components/ui/AutoComplete.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/LinkPropertyEditor.tsx:undefined:undefined",
        "src/components/ui/AutoComplete.tsx:undefined:undefined"
      ]
    },
    {
      "name": "getColor",
      "definedIn": [
        "src/components/Canvas/NamespaceLegendCore.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/NamespaceLegendCore.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setNodeIri",
      "definedIn": [
        "src/components/Canvas/NodePropertyEditor.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setNodeType",
      "definedIn": [
        "src/components/Canvas/NodePropertyEditor.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setRdfTypesState",
      "definedIn": [
        "src/components/Canvas/NodePropertyEditor.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined"
      ]
    },
    {
      "name": "key",
      "definedIn": [
        "src/components/Canvas/NodePropertyEditor.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined"
      ]
    },
    {
      "name": "alert",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined"
      ]
    },
    {
      "name": "diffProperties",
      "definedIn": [
        "src/components/Canvas/NodePropertyEditor.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined"
      ]
    },
    {
      "name": "closest",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined"
      ]
    },
    {
      "name": "preventDefault",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.dom.d.ts",
        "node_modules/@types/react/index.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined",
        "src/components/ui/carousel.tsx:undefined:undefined",
        "src/components/ui/sidebar.tsx:undefined:undefined"
      ]
    },
    {
      "name": "handleSave",
      "definedIn": [
        "src/components/Canvas/NodePropertyEditor.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined"
      ]
    },
    {
      "name": "handleAddProperty",
      "definedIn": [
        "src/components/Canvas/NodePropertyEditor.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined"
      ]
    },
    {
      "name": "getAnnotationProperties",
      "definedIn": [
        "src/components/Canvas/NodePropertyEditor.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined"
      ]
    },
    {
      "name": "handleUpdateProperty",
      "definedIn": [
        "src/components/Canvas/NodePropertyEditor.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined"
      ]
    },
    {
      "name": "getXSDTypes",
      "definedIn": [
        "src/components/Canvas/NodePropertyEditor.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined"
      ]
    },
    {
      "name": "handleDelete",
      "definedIn": [
        "src/components/Canvas/NodePropertyEditor.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined"
      ]
    },
    {
      "name": "getStatusInfo",
      "definedIn": [
        "src/components/Canvas/ReasoningIndicator.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ReasoningIndicator.tsx:undefined:undefined"
      ]
    },
    {
      "name": "onRunReason",
      "definedIn": [
        "src/components/Canvas/ReasoningIndicator.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ReasoningIndicator.tsx:undefined:undefined"
      ]
    },
    {
      "name": "toLocaleString",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es5.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ReasoningReportModal.tsx:undefined:undefined",
        "src/components/ui/chart.tsx:undefined:undefined"
      ]
    },
    {
      "name": "calculateInitialSize",
      "definedIn": [
        "src/components/Canvas/ResizableNamespaceLegend.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setNeedsScroll",
      "definedIn": [
        "src/components/Canvas/ResizableNamespaceLegend.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setIsDragging",
      "definedIn": [
        "src/components/Canvas/ResizableNamespaceLegend.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setDragStart",
      "definedIn": [
        "src/components/Canvas/ResizableNamespaceLegend.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setIsResizing",
      "definedIn": [
        "src/components/Canvas/ResizableNamespaceLegend.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setResizeStart",
      "definedIn": [
        "src/components/Canvas/ResizableNamespaceLegend.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setPosition",
      "definedIn": [
        "src/components/Canvas/ResizableNamespaceLegend.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setSize",
      "definedIn": [
        "src/components/Canvas/ResizableNamespaceLegend.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined"
      ]
    },
    {
      "name": "handlePointerDown",
      "definedIn": [
        "src/components/Canvas/ResizableNamespaceLegend.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setShowAdd",
      "definedIn": [
        "src/components/Canvas/ResizableNamespaceLegend.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setNewPrefix",
      "definedIn": [
        "src/components/Canvas/ResizableNamespaceLegend.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setNewUri",
      "definedIn": [
        "src/components/Canvas/ResizableNamespaceLegend.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setError",
      "definedIn": [
        "src/components/Canvas/ResizableNamespaceLegend.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setTick",
      "definedIn": [
        "src/components/Canvas/ResizableNamespaceLegend.tsx",
        "src/components/Canvas/core/namespacePalette.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined",
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined"
      ]
    },
    {
      "name": "forwardRef",
      "definedIn": [
        "node_modules/@types/react/index.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/accordion.tsx:undefined:undefined",
        "src/components/ui/alert-dialog.tsx:undefined:undefined",
        "src/components/ui/alert.tsx:undefined:undefined",
        "src/components/ui/avatar.tsx:undefined:undefined",
        "src/components/ui/breadcrumb.tsx:undefined:undefined",
        "src/components/ui/button.tsx:undefined:undefined",
        "src/components/ui/card.tsx:undefined:undefined",
        "src/components/ui/carousel.tsx:undefined:undefined",
        "src/components/ui/chart.tsx:undefined:undefined",
        "src/components/ui/checkbox.tsx:undefined:undefined",
        "src/components/ui/command.tsx:undefined:undefined",
        "src/components/ui/context-menu.tsx:undefined:undefined",
        "src/components/ui/dialog.tsx:undefined:undefined",
        "src/components/ui/drawer.tsx:undefined:undefined",
        "src/components/ui/dropdown-menu.tsx:undefined:undefined",
        "src/components/ui/form.tsx:undefined:undefined",
        "src/components/ui/hover-card.tsx:undefined:undefined",
        "src/components/ui/input-otp.tsx:undefined:undefined",
        "src/components/ui/input.tsx:undefined:undefined",
        "src/components/ui/label.tsx:undefined:undefined",
        "src/components/ui/menubar.tsx:undefined:undefined",
        "src/components/ui/navigation-menu.tsx:undefined:undefined",
        "src/components/ui/pagination.tsx:undefined:undefined",
        "src/components/ui/popover.tsx:undefined:undefined",
        "src/components/ui/progress.tsx:undefined:undefined",
        "src/components/ui/radio-group.tsx:undefined:undefined",
        "src/components/ui/scroll-area.tsx:undefined:undefined",
        "src/components/ui/select.tsx:undefined:undefined",
        "src/components/ui/separator.tsx:undefined:undefined",
        "src/components/ui/sheet.tsx:undefined:undefined",
        "src/components/ui/sidebar.tsx:undefined:undefined",
        "src/components/ui/slider.tsx:undefined:undefined",
        "src/components/ui/switch.tsx:undefined:undefined",
        "src/components/ui/table.tsx:undefined:undefined",
        "src/components/ui/tabs.tsx:undefined:undefined",
        "src/components/ui/textarea.tsx:undefined:undefined",
        "src/components/ui/toast.tsx:undefined:undefined",
        "src/components/ui/toggle-group.tsx:undefined:undefined",
        "src/components/ui/toggle.tsx:undefined:undefined",
        "src/components/ui/tooltip.tsx:undefined:undefined"
      ]
    },
    {
      "name": "buttonVariants",
      "definedIn": [
        "src/components/ui/alert-dialog.tsx",
        "src/components/ui/button.tsx",
        "src/components/ui/calendar.tsx",
        "src/components/ui/pagination.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/alert-dialog.tsx:undefined:undefined",
        "src/components/ui/button.tsx:undefined:undefined",
        "src/components/ui/calendar.tsx:undefined:undefined",
        "src/components/ui/pagination.tsx:undefined:undefined"
      ]
    },
    {
      "name": "cva",
      "definedIn": [
        "src/components/ui/alert.tsx",
        "src/components/ui/badgeVariants.ts",
        "src/components/ui/buttonVariants.ts",
        "src/components/ui/label.tsx",
        "src/components/ui/navigationMenuHelpers.ts",
        "src/components/ui/sheet.tsx",
        "src/components/ui/sidebar.tsx",
        "src/components/ui/toast.tsx",
        "src/components/ui/toggleVariants.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/alert.tsx:undefined:undefined",
        "src/components/ui/badgeVariants.ts:undefined:undefined",
        "src/components/ui/buttonVariants.ts:undefined:undefined",
        "src/components/ui/label.tsx:undefined:undefined",
        "src/components/ui/navigationMenuHelpers.ts:undefined:undefined",
        "src/components/ui/sheet.tsx:undefined:undefined",
        "src/components/ui/sidebar.tsx:undefined:undefined",
        "src/components/ui/toast.tsx:undefined:undefined",
        "src/components/ui/toggleVariants.ts:undefined:undefined"
      ]
    },
    {
      "name": "alertVariants",
      "definedIn": [
        "src/components/ui/alert.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/alert.tsx:undefined:undefined"
      ]
    },
    {
      "name": "onValueChange",
      "definedIn": [
        "src/components/ui/AutoComplete.tsx",
        "src/components/ui/EntityAutocomplete.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/AutoComplete.tsx:undefined:undefined",
        "src/components/ui/EntityAutocomplete.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setInputValue",
      "definedIn": [
        "src/components/ui/AutoComplete.tsx",
        "src/components/ui/EntityAutocomplete.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/AutoComplete.tsx:undefined:undefined",
        "src/components/ui/EntityAutocomplete.tsx:undefined:undefined"
      ]
    },
    {
      "name": "Badge",
      "definedIn": [
        "src/components/ui/badge.tsx"
      ],
      "role": "",
      "callSites": []
    },
    {
      "name": "badgeVariants",
      "definedIn": [
        "src/components/ui/badge.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/badge.tsx:undefined:undefined"
      ]
    },
    {
      "name": "Calendar",
      "definedIn": [
        "src/components/ui/calendar.tsx"
      ],
      "role": "",
      "callSites": []
    },
    {
      "name": "useCarousel",
      "definedIn": [
        "src/components/ui/carousel.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/carousel.tsx:undefined:undefined"
      ]
    },
    {
      "name": "createContext",
      "definedIn": [
        "node_modules/@types/react/index.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/carousel.tsx:undefined:undefined",
        "src/components/ui/chart.tsx:undefined:undefined",
        "src/components/ui/formHelpers.tsx:undefined:undefined",
        "src/components/ui/sidebar.tsx:undefined:undefined",
        "src/components/ui/toggle-group.tsx:undefined:undefined"
      ]
    },
    {
      "name": "useContext",
      "definedIn": [
        "node_modules/@types/react/index.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/carousel.tsx:undefined:undefined",
        "src/components/ui/chart.tsx:undefined:undefined",
        "src/components/ui/formHelpers.tsx:undefined:undefined",
        "src/components/ui/input-otp.tsx:undefined:undefined",
        "src/components/ui/sidebar.tsx:undefined:undefined",
        "src/components/ui/toggle-group.tsx:undefined:undefined"
      ]
    },
    {
      "name": "useEmblaCarousel",
      "definedIn": [
        "src/components/ui/carousel.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/carousel.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setCanScrollPrev",
      "definedIn": [
        "src/components/ui/carousel.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/carousel.tsx:undefined:undefined"
      ]
    },
    {
      "name": "canScrollPrev",
      "definedIn": [
        "node_modules/embla-carousel/components/EmblaCarousel.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/carousel.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setCanScrollNext",
      "definedIn": [
        "src/components/ui/carousel.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/carousel.tsx:undefined:undefined"
      ]
    },
    {
      "name": "canScrollNext",
      "definedIn": [
        "node_modules/embla-carousel/components/EmblaCarousel.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/carousel.tsx:undefined:undefined"
      ]
    },
    {
      "name": "scrollPrev",
      "definedIn": [
        "node_modules/embla-carousel/components/EmblaCarousel.d.ts",
        "src/components/ui/carousel.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/carousel.tsx:undefined:undefined"
      ]
    },
    {
      "name": "scrollNext",
      "definedIn": [
        "node_modules/embla-carousel/components/EmblaCarousel.d.ts",
        "src/components/ui/carousel.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/carousel.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setApi",
      "definedIn": [
        "src/components/ui/carousel.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/carousel.tsx:undefined:undefined"
      ]
    },
    {
      "name": "onSelect",
      "definedIn": [
        "src/components/ui/carousel.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/carousel.tsx:undefined:undefined"
      ]
    },
    {
      "name": "on",
      "definedIn": [
        "node_modules/embla-carousel/components/EmblaCarousel.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/carousel.tsx:undefined:undefined"
      ]
    },
    {
      "name": "off",
      "definedIn": [
        "node_modules/embla-carousel/components/EmblaCarousel.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/carousel.tsx:undefined:undefined"
      ]
    },
    {
      "name": "useChart",
      "definedIn": [
        "src/components/ui/chart.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/chart.tsx:undefined:undefined"
      ]
    },
    {
      "name": "getPayloadConfigFromPayload",
      "definedIn": [
        "src/components/ui/chart.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/chart.tsx:undefined:undefined"
      ]
    },
    {
      "name": "useId",
      "definedIn": [
        "node_modules/@types/react/index.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/chart.tsx:undefined:undefined",
        "src/components/ui/form.tsx:undefined:undefined"
      ]
    },
    {
      "name": "labelFormatter",
      "definedIn": [
        "src/components/ui/chart.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/chart.tsx:undefined:undefined"
      ]
    },
    {
      "name": "formatter",
      "definedIn": [
        "src/components/ui/chart.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/chart.tsx:undefined:undefined"
      ]
    },
    {
      "name": "shortLabelFromUri",
      "definedIn": [
        "src/components/ui/EntityAutocomplete.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/EntityAutocomplete.tsx:undefined:undefined"
      ]
    },
    {
      "name": "useFormField",
      "definedIn": [
        "src/components/ui/form.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/form.tsx:undefined:undefined"
      ]
    },
    {
      "name": "useFormContext",
      "definedIn": [
        "src/components/ui/formHelpers.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/formHelpers.tsx:undefined:undefined"
      ]
    },
    {
      "name": "getFieldState",
      "definedIn": [
        "src/components/ui/formHelpers.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/formHelpers.tsx:undefined:undefined"
      ]
    },
    {
      "name": "labelVariants",
      "definedIn": [
        "src/components/ui/label.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/label.tsx:undefined:undefined"
      ]
    },
    {
      "name": "navigationMenuTriggerStyle",
      "definedIn": [
        "src/components/ui/navigation-menu.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/navigation-menu.tsx:undefined:undefined"
      ]
    },
    {
      "name": "sheetVariants",
      "definedIn": [
        "src/components/ui/sheet.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/sheet.tsx:undefined:undefined"
      ]
    },
    {
      "name": "useSidebar",
      "definedIn": [
        "src/components/ui/sidebar.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/sidebar.tsx:undefined:undefined"
      ]
    },
    {
      "name": "value",
      "definedIn": [
        "src/components/ui/sidebar.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/sidebar.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setOpenProp",
      "definedIn": [
        "src/components/ui/sidebar.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/sidebar.tsx:undefined:undefined"
      ]
    },
    {
      "name": "_setOpen",
      "definedIn": [
        "src/components/ui/sidebar.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/sidebar.tsx:undefined:undefined"
      ]
    },
    {
      "name": "setOpenMobile",
      "definedIn": [
        "src/components/ui/sidebar.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/sidebar.tsx:undefined:undefined"
      ]
    },
    {
      "name": "toggleSidebar",
      "definedIn": [
        "src/components/ui/sidebar.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/sidebar.tsx:undefined:undefined"
      ]
    },
    {
      "name": "onClick",
      "definedIn": [
        "src/components/ui/sidebar.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/sidebar.tsx:undefined:undefined"
      ]
    },
    {
      "name": "sidebarMenuButtonVariants",
      "definedIn": [
        "src/components/ui/sidebar.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/sidebar.tsx:undefined:undefined"
      ]
    },
    {
      "name": "Skeleton",
      "definedIn": [
        "src/components/ui/skeleton.tsx"
      ],
      "role": "",
      "callSites": []
    },
    {
      "name": "useTheme",
      "definedIn": [
        "src/components/ui/sonner.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/sonner.tsx:undefined:undefined"
      ]
    },
    {
      "name": "toastVariants",
      "definedIn": [
        "src/components/ui/toast.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/toast.tsx:undefined:undefined"
      ]
    },
    {
      "name": "Toaster",
      "definedIn": [
        "src/components/ui/toaster.tsx"
      ],
      "role": "",
      "callSites": []
    },
    {
      "name": "toggleVariants",
      "definedIn": [
        "src/components/ui/toggle-group.tsx",
        "src/components/ui/toggle.tsx"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/toggle-group.tsx:undefined:undefined",
        "src/components/ui/toggle.tsx:undefined:undefined"
      ]
    },
    {
      "name": "DiagramManager",
      "definedIn": [
        "src/components/Canvas/core/DiagramManager.ts"
      ],
      "role": "",
      "callSites": []
    },
    {
      "name": "buildEdgePayload",
      "definedIn": [
        "src/components/Canvas/core/edgeHelpers.ts"
      ],
      "role": "",
      "callSites": []
    },
    {
      "name": "addEdgeToCurrentGraph",
      "definedIn": [
        "src/components/Canvas/core/edgeHelpers.ts"
      ],
      "role": "",
      "callSites": []
    },
    {
      "name": "getPredicateDisplay",
      "definedIn": [
        "src/components/Canvas/core/edgeLabel.ts"
      ],
      "role": "",
      "callSites": []
    },
    {
      "name": "EventHandlerManager",
      "definedIn": [
        "src/components/Canvas/core/EventHandlers.ts"
      ],
      "role": "",
      "callSites": []
    },
    {
      "name": "mapDiagramToQuads",
      "definedIn": [
        "src/components/Canvas/core/mappingHelpers.ts"
      ],
      "role": "",
      "callSites": []
    },
    {
      "name": "ensureNode",
      "definedIn": [
        "src/components/Canvas/core/mappingHelpers.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/core/mappingHelpers.ts:undefined:undefined"
      ]
    },
    {
      "name": "predicateKind",
      "definedIn": [
        "src/components/Canvas/core/mappingHelpers.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/core/mappingHelpers.ts:undefined:undefined"
      ]
    },
    {
      "name": "isLiteral",
      "definedIn": [
        "src/components/Canvas/core/mappingHelpers.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/core/mappingHelpers.ts:undefined:undefined"
      ]
    },
    {
      "name": "isBlankNodeReferenced",
      "definedIn": [
        "src/components/Canvas/core/mappingHelpers.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/core/mappingHelpers.ts:undefined:undefined"
      ]
    },
    {
      "name": "getPalette",
      "definedIn": [
        "src/components/Canvas/core/namespacePalette.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined"
      ]
    },
    {
      "name": "clamp01",
      "definedIn": [
        "src/components/Canvas/core/namespacePalette.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined"
      ]
    },
    {
      "name": "hexToRgb",
      "definedIn": [
        "src/components/Canvas/core/namespacePalette.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined"
      ]
    },
    {
      "name": "rgbToHex",
      "definedIn": [
        "src/components/Canvas/core/namespacePalette.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined"
      ]
    },
    {
      "name": "rgbToHsl",
      "definedIn": [
        "src/components/Canvas/core/namespacePalette.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined"
      ]
    },
    {
      "name": "hslToRgb",
      "definedIn": [
        "src/components/Canvas/core/namespacePalette.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined"
      ]
    },
    {
      "name": "colorDistanceRgbNormalized",
      "definedIn": [
        "src/components/Canvas/core/namespacePalette.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined"
      ]
    },
    {
      "name": "adjustColorAwayFromList",
      "definedIn": [
        "src/components/Canvas/core/namespacePalette.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined"
      ]
    },
    {
      "name": "padStart",
      "definedIn": [
        "../../../node_modules/typescript/lib/lib.es2017.string.d.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined"
      ]
    },
    {
      "name": "hue2rgb",
      "definedIn": [
        "src/components/Canvas/core/namespacePalette.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined"
      ]
    },
    {
      "name": "pickMeaningfulType",
      "definedIn": [
        "src/components/Canvas/core/nodeDisplay.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/core/nodeDisplay.ts:undefined:undefined"
      ]
    },
    {
      "name": "tdShortLocalName",
      "definedIn": [
        "src/components/Canvas/core/nodeDisplay.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/core/nodeDisplay.ts:undefined:undefined"
      ]
    },
    {
      "name": "TemplateManager",
      "definedIn": [
        "src/components/Canvas/core/TemplateManager.ts"
      ],
      "role": "",
      "callSites": []
    },
    {
      "name": "filterNodesByViewMode",
      "definedIn": [
        "src/components/Canvas/helpers/diagramHelpers.ts"
      ],
      "role": "",
      "callSites": []
    },
    {
      "name": "applyPaletteToModelForDiagram",
      "definedIn": [
        "src/components/Canvas/helpers/diagramHelpers.ts"
      ],
      "role": "",
      "callSites": []
    },
    {
      "name": "buildPaletteForRdfManager",
      "definedIn": [
        "src/components/Canvas/helpers/diagramHelpers.ts"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/helpers/diagramHelpers.ts:undefined:undefined"
      ]
    },
    {
      "name": "resolveKeyForCg",
      "definedIn": [
        "src/components/Canvas/helpers/graphMappingHelpers.ts"
      ],
      "role": "",
      "callSites": []
    },
    {
      "name": "deriveNamespaceFromInfo",
      "definedIn": [
        "src/components/Canvas/helpers/paletteHelpers.ts"
      ],
      "role": "",
      "callSites": []
    },
    {
      "name": "getColorFromPalette",
      "definedIn": [
        "src/components/Canvas/helpers/paletteHelpers.ts"
      ],
      "role": "",
      "callSites": []
    },
    {
      "name": "(useAppConfigStore as any).getState",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/main.tsx:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "origGetComputedStyle.call",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/test-setup.ts:undefined:undefined"
      ]
    },
    {
      "name": "(window as any).__VG_INIT_APP",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/startupUrlQueryParam.test.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "(tm as any).computeDisplayType",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/SpecimenIntegration.test.ts:undefined:undefined",
        "src/__tests__/components/SpecimenTemplateManager.test.ts:undefined:undefined",
        "src/__tests__/typeHelpers.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "create<AppConfigStore>()",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/appConfigStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "((...__vg_args) => {\n      try {\n        debug(\"console.debug\", {\n          args: __vg_args.map((a: any) =>\n            a && (a as any).message ? (a as any).message : String(a),\n          ),\n        });\n      } catch (_) {\n        try {\n          if (typeof fallback === \"function\") {\n            fallback(\"emptyCatch\", { error: String(_) });\n          }\n        } catch (_) {\n          /* ignore */\n        }\n      }\n      console.debug(...__vg_args);\n    })",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "(function (u: string) {\n        try {\n          const s = String(u).trim();\n          if (s.toLowerCase().startsWith(\"http://\")) {\n            return s.replace(/^http:\\/\\//i, \"https://\");\n          }\n          try {\n            return new URL(s).toString();\n          } catch {\n            return s.replace(/\\/+$/, \"\");\n          }\n        } catch (_) {\n          return String(u || \"\");\n        }\n      })",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "(function (x: any) {\n                try {\n                  const s = String(x).trim();\n                  if (s.toLowerCase().startsWith(\"http://\"))\n                    return s.replace(/^http:\\/\\//i, \"https://\");\n                  try {\n                    return new URL(s).toString();\n                  } catch {\n                    return s.replace(/\\/+$/, \"\");\n                  }\n                } catch (_) {\n                  return String(x || \"\");\n                }\n              })",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "import",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/LayoutManager.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "store.getQuads",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/delete_node_and_edge.test.tsx:undefined:undefined",
        "src/__tests__/stores/completeRdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfWorkflow.test.ts:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/LinkPropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/core/edgeHelpers.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "existing.forEach",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "store.removeQuad",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/LinkPropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "(node as any).rdfTypes.slice",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "allTypes.filter",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "(\n              node as any\n            ).annotationProperties.map",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "(node.literalProperties || []).map",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "(n as any).rdfTypes.slice",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "n.iri.split(\"/\").pop",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "n.iri.split",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "((...__vg_args) => {\n        try {\n          fallback(\n            \"console.error\",\n            {\n              args: __vg_args.map((a: any) =>\n                a && (a as any).message ? (a as any).message : String(a),\n              ),\n            },\n            { level: \"error\", captureStack: true },\n          );\n        } catch (_) {\n          /* ignore */\n        }\n        console.error(\"Failed to load ontology:\", error);\n      })",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "store.addQuad",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/delete_node_and_edge.test.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/LinkPropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/core/edgeHelpers.ts:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "((...__vg_args) => {\n        try {\n          fallback(\n            \"console.error\",\n            {\n              args: __vg_args.map((a: any) =>\n                a && (a as any).message ? (a as any).message : String(a),\n              ),\n            },\n            { level: \"error\", captureStack: true },\n          );\n        } catch (_) {\n          /* ignore */\n        }\n        console.error(\"Failed to load ontology from RDF:\", error);\n      })",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "updates.annotationProperties.forEach",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "p.propertyUri.indexOf",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "p.propertyUri.substring",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined",
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "updates.rdfTypes.find",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "updates.annotationProperties.map",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "legacy.map",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "mgr.getStore",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/LinkPropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "(mgr as any).expandPrefix",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined",
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "allQuads.map((q: any) => (q && q.subject && q.subject.value) || \"\").filter",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "allQuads.map",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "typeQuads.map((q: any) => (q && q.object && (q.object as any).value) || \"\").filter",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "typeQuads.map",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "existingClasses.forEach",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "existingProps.forEach",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "m.aliases.includes",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "prefix.replace",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "urls.forEach",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "rdfMgr.getNamespaces",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "rdfMgr\n                .loadRDFIntoGraph(\n                  `@prefix ${String(p)}: <${String(ns)}> . ${String(p)}:__vg_dummy a ${String(p)}:__Dummy .`,\n                  \"urn:vg:ontologies\",\n                )\n                .catch",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "rdfMgr\n                .loadRDFIntoGraph",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/ontologyStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "edge.label.trim",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/reasoningStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "node.literalProperties?.some",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/reasoningStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "rdfStore.getQuads",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/e2e/demo_flow_single_triple_change.test.ts:undefined:undefined",
        "src/__tests__/e2e/reactflow_edge_persistence.test.ts:undefined:undefined",
        "src/__tests__/stores/completeRdfWorkflow.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.entityPreservation.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.loadOntologyRdf.test.ts:undefined:undefined",
        "src/__tests__/stores/rdfWorkflow.test.ts:undefined:undefined",
        "src/stores/reasoningStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "(rdfStore as any).getQuads",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/reasoningStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "rdfStore.addQuad",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/e2e/reactflow_edge_persistence.test.ts:undefined:undefined",
        "src/stores/reasoningStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "(rdfStore as any).addQuad",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/reasoningStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "(rdfStore as any).add",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/reasoningStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "(rdfStore as any).quad",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/reasoningStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "create<SettingsStore>()",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/stores/settingsStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "((...__vg_args)=>{try{fallback('console.error',{args:__vg_args.map(a=> (a && a.message)? a.message : String(a))},{level:'error', captureStack:true})}catch (_) { try { if (typeof fallback === \"function\") { fallback(\"emptyCatch\", { error: String(_) }); } } catch (_) { try { if (typeof fallback === \"function\") { fallback(\"emptyCatch\", { error: String(_) }); } } catch (_) { /* empty */ } } } console.error(...__vg_args);})",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/stores/settingsStore.ts:undefined:undefined"
      ]
    },
    {
      "name": "st.setConfig",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "m.aliases.forEach",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "this.store.addQuad.bind",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "this.store.removeQuad.bind",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "(cb as any)",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "this.store.getQuads",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "parser.on",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "this.store.countQuads",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "this.store.addQuad",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "parser.write",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "parser.end",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "m.replace",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "this.parser.parse",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "existingTypeQuads.map",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "existingQuads.forEach",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "this.store.removeQuad",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "writer.addQuads",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "writer.end",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "all.forEach",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "subj.startsWith",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "pred.startsWith",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "obj.startsWith",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "((...__vg_args) => {\n          try {\n            fallback(\n              \"console.warn\",\n              {\n                args: __vg_args.map((a) =>\n                  a && a.message ? a.message : String(a),\n                ),\n              },\n              { level: \"warn\" },\n            );\n          } catch (_) {\n            try {\n              if (typeof fallback === \"function\") {\n                fallback(\"emptyCatch\", { error: String(_) });\n              }\n            } catch (_) {\n              /* ignore */\n            }\n          }\n          console.warn(...__vg_args);\n        })",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "quads.forEach",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "((...__vg_args) => {\n        try {\n          fallback(\n            \"console.warn\",\n            {\n              args: __vg_args.map((a) =>\n                a && a.message ? a.message : String(a),\n              ),\n            },\n            { level: \"warn\" },\n          );\n        } catch (_) {\n          try {\n            if (typeof fallback === \"function\") {\n              fallback(\"emptyCatch\", { error: String(_) });\n            }\n          } catch (_) {\n            /* ignore */\n          }\n        }\n        console.warn(...__vg_args);\n      })",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "node.rdfTypes.slice",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "allTypes.slice",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "candidates.push",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "node.literalProperties.map",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "node.annotationProperties.map",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "(p.propertyUri || \"\").indexOf",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "((...__vg_args) => {\n              try {\n                fallback(\n                  \"console.warn\",\n                  {\n                    args: __vg_args.map((a) =>\n                      a && a.message ? a.message : String(a),\n                    ),\n                  },\n                  { level: \"warn\" },\n                );\n              } catch (_) {\n                try {\n                  if (typeof fallback === \"function\") {\n                    fallback(\"emptyCatch\", { error: String(_) });\n                  }\n                } catch (_) {\n                  /* ignore */\n                }\n              }\n              console.warn(...__vg_args);\n            })",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "((...__vg_args)=>{try{fallback('console.warn',{args:__vg_args.map(a=> (a && a.message)? a.message : String(a))},{level:'warn'})}catch (_) { try { if (typeof fallback === \"function\") { fallback(\"emptyCatch\", { error: String(_) }); } } catch (_) { try { if (typeof fallback === \"function\") { fallback(\"emptyCatch\", { error: String(_) }); } } catch (_) { /* empty */ } } } console.warn(...__vg_args);})",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined",
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "DataFactory.blankNode",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "typeQuads.forEach",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "this.store.getQuads(subjectUri, null, null, null)\n        .filter",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "propertyQuads.forEach",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "this.store.getQuads(null, null, null, null)\n      .filter",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "objectQuads.forEach",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "ct.indexOf",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "ct.substring",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "((n as any).annotationProperties || []).map",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/rdfParser.ts:undefined:undefined"
      ]
    },
    {
      "name": "s.milestones.push",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/startupDebug.ts:undefined:undefined"
      ]
    },
    {
      "name": "s.logs.push",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/startupDebug.ts:undefined:undefined"
      ]
    },
    {
      "name": "s.logs.shift",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/startupDebug.ts:undefined:undefined"
      ]
    },
    {
      "name": "(s.anomalies = s.anomalies || []).push",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/startupDebug.ts:undefined:undefined"
      ]
    },
    {
      "name": "s.fallbacks.push",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/startupDebug.ts:undefined:undefined"
      ]
    },
    {
      "name": "s.fallbacks.shift",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/startupDebug.ts:undefined:undefined"
      ]
    },
    {
      "name": "(mgr as any).getNamespaces",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/termUtils.ts:undefined:undefined"
      ]
    },
    {
      "name": "iriStr.startsWith",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/termUtils.ts:undefined:undefined"
      ]
    },
    {
      "name": "iriStr.substring",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/termUtils.ts:undefined:undefined"
      ]
    },
    {
      "name": "(rdfManager as any).expandPrefix",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/termUtils.ts:undefined:undefined"
      ]
    },
    {
      "name": "iri.startsWith",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/termUtils.ts:undefined:undefined"
      ]
    },
    {
      "name": "targetIri.includes",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/termUtils.ts:undefined:undefined"
      ]
    },
    {
      "name": "(rdfManager as any).getNamespaces",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined",
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined",
        "src/utils/termUtils.ts:undefined:undefined"
      ]
    },
    {
      "name": "(mql as any).addListener",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/theme.ts:undefined:undefined"
      ]
    },
    {
      "name": "(() => {\n  const m = new Map<string, string[]>();\n  for (const p of WELL_KNOWN_PREFIXES) {\n    const arr = m.get(p.url) || [];\n    arr.push(p.prefix);\n    m.set(p.url, arr);\n  }\n  return m;\n})",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/wellKnownOntologies.ts:undefined:undefined"
      ]
    },
    {
      "name": "(() => {\n    const out: Record<\n      string,\n      { name: string; namespaces?: Record<string, string>; aliases?: string[] }\n    > = {};\n    for (const p of WELL_KNOWN_PREFIXES) {\n      // If the prefix's url looks like an ontology URL (ends with / or #) we add an entry.\n      // Use the namespace URI itself as the ontology key.\n      if (!out[p.url]) {\n        out[p.url] = { name: p.name, namespaces: {}, aliases: [p.url] };\n      }\n      out[p.url].namespaces = {\n        ...(out[p.url].namespaces || {}),\n        [p.prefix]: p.url,\n      };\n    }\n    return out;\n  })",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/utils/wellKnownOntologies.ts:undefined:undefined"
      ]
    },
    {
      "name": "parserInstance.parse.bind",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/callgraph/duplicate-calls.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "rdfManager.clear",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/delete_node_and_edge.test.tsx:undefined:undefined",
        "src/__tests__/stores/rdfManager.applyParsedNodes.absoluteIri.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "(useOntologyStore as any).setState",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/delete_node_and_edge.test.tsx:undefined:undefined"
      ]
    },
    {
      "name": "rdfManager.getStore",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/delete_node_and_edge.test.tsx:undefined:undefined",
        "src/__tests__/e2e/reactflow_edge_persistence.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "(useOntologyStore as any).getState",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/SpecimenIntegration.test.ts:undefined:undefined",
        "src/__tests__/components/SpecimenTemplateManager.test.ts:undefined:undefined",
        "src/__tests__/components/delete_node_and_edge.test.tsx:undefined:undefined",
        "src/__tests__/e2e/reactflow_edge_persistence.test.ts:undefined:undefined",
        "src/components/Canvas/FloatingEdge.tsx:undefined:undefined",
        "src/components/Canvas/core/edgeHelpers.ts:undefined:undefined"
      ]
    },
    {
      "name": "nodes.find",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/delete_node_and_edge.test.tsx:undefined:undefined"
      ]
    },
    {
      "name": "edges.find",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/delete_node_and_edge.test.tsx:undefined:undefined"
      ]
    },
    {
      "name": "inst.getNodes",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/KnowledgeCanvas.preserve.test.tsx:undefined:undefined"
      ]
    },
    {
      "name": "inst.getEdges",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/KnowledgeCanvas.preserve.test.tsx:undefined:undefined"
      ]
    },
    {
      "name": "instAfter.getNodes",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/KnowledgeCanvas.preserve.test.tsx:undefined:undefined"
      ]
    },
    {
      "name": "instAfter.getEdges",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/KnowledgeCanvas.preserve.test.tsx:undefined:undefined"
      ]
    },
    {
      "name": "React.createElement",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/components/NodePropertyEditor.test.tsx:undefined:undefined"
      ]
    },
    {
      "name": "(useAppConfigStore.getState().resetToDefaults || (() => {}))",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/debug/load_additional_debug.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "(useOntologyStore.getState().clearOntologies || (() => {}))",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/debug/load_additional_debug.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "cfg.additionalOntologies.slice",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/debug/load_additional_debug.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "list.push",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/debug/load_additional_debug.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "rdfStore.getQuads(null, null, null, null).map",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/e2e/demo_flow_single_triple_change.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "(nodeData.literalProperties || []).slice",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/e2e/demo_flow_single_triple_change.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "literalProperties.push",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/e2e/demo_flow_single_triple_change.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "after.filter",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/e2e/demo_flow_single_triple_change.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "(cg.edges || []).some",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/e2e/reactflow_edge_persistence.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "rdfManager.getStore().getQuads",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/e2e/reactflow_edge_persistence.unit.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.remove.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "preservedNode?.data.literalProperties.find",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/stores/ontologyStore.graphPreservation.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "mgr.getStore().getQuads",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/stores/ontologyStore.iofFetch.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.urlFormatDetection.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "all.some",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/stores/ontologyStore.iofFetch.test.ts:undefined:undefined",
        "src/__tests__/stores/ontologyStore.urlFormatDetection.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "rdfManager.getNamespaces",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/stores/rdfManager.applyParsedNodes.absoluteIri.test.ts:undefined:undefined",
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined"
      ]
    },
    {
      "name": "rdfManager.applyParsedNodes",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/__tests__/stores/rdfManager.applyParsedNodes.absoluteIri.test.ts:undefined:undefined"
      ]
    },
    {
      "name": "React.useEffect",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined"
      ]
    },
    {
      "name": "(() => { try { return new URL(ont.url).hostname } catch (_) { return String(ont.url) } })",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CanvasToolbar.tsx:undefined:undefined"
      ]
    },
    {
      "name": "(() => {\n          try {\n            return new URL(uri).hostname + (new URL(uri).pathname ? new URL(uri).pathname.split('/').pop() || '' : '');\n          } catch {\n            return uri;\n          }\n        })",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined"
      ]
    },
    {
      "name": "(() => {\n                      try {\n                        const mgr = useOntologyStore.getState().getRdfManager();\n                        const ns = (mgr && typeof mgr.getNamespaces === 'function') ? mgr.getNamespaces() : {};\n                        const wkPrefixes = (WELL_KNOWN && (WELL_KNOWN as any).prefixes) ? (WELL_KNOWN as any).prefixes : {};\n                        const prefixes = (prefixesText || \"\").split(\",\").map(s=>s.trim()).filter(Boolean);\n                        const explicitUris = (urisText || \"\").split(\",\").map(s=>s.trim()).filter(Boolean);\n\n                        // Expand prefixes to namespace URIs using runtime namespaces, then well-known fallbacks.\n                        const expandedFromPrefixes = prefixes.map((p) => {\n                          try {\n                            if (!p) return \"\";\n                            if (ns[p]) return ns[p];\n                            if (wkPrefixes && wkPrefixes[p]) return wkPrefixes[p];\n                            if (mgr && typeof (mgr as any).expandPrefix === 'function') {\n                              try {\n                                const attempt = (mgr as any).expandPrefix(`${p}:dummy`);\n                                // If expandPrefix returns something containing http, try to strip the dummy suffix.\n                                if (typeof attempt === 'string') {\n                                  const stripped = attempt.replace(/dummy$/, '');\n                                  if (/^https?:\\/\\//i.test(stripped)) return stripped;\n                                }\n                              } catch (_) { /* ignore */ }\n                            }\n                            return \"\";\n                          } catch (_) {\n                            return \"\";\n                          }\n                        }).filter(Boolean);\n\n                        // Combine and dedupe expanded URIs and explicit URIs\n                        const combined = Array.from(new Set<string>([...expandedFromPrefixes, ...explicitUris])).filter(Boolean);\n\n                        if (combined.length === 0) {\n                          return <div className=\"text-xs text-muted-foreground\">None</div>;\n                        }\n\n                        return combined.map((u, i) => (\n                          <div key={i} className=\"truncate\">{u}</div>\n                        ));\n                      } catch (_) {\n                        return <div className=\"text-xs text-muted-foreground\">n/a</div>;\n                      }\n                    })",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ConfigurationPanel.tsx:undefined:undefined"
      ]
    },
    {
      "name": "(() => {\n        if (propertyIri.startsWith('_:')) return propertyIri;\n        if (!rdfManager) throw new Error(`computeTermDisplay requires rdfManager to resolve '${propertyIri}'`);\n          const td = computeTermDisplay(propertyIri, rdfManager as any, (palette as any));\n          return td.prefixed || td.short || '';\n      })",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined"
      ]
    },
    {
      "name": "(() => {\n        const keyStr = String(k);\n        if (keyStr.startsWith('_:')) return keyStr;\n        if (!rdfManager) throw new Error(`computeTermDisplay requires rdfManager to resolve '${keyStr}'`);\n        const td = computeTermDisplay(keyStr, rdfManager as any, (palette as any));\n        return td.prefixed || td.short || '';\n      })",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined"
      ]
    },
    {
      "name": "(el as any).closest",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined"
      ]
    },
    {
      "name": "(() => {\n    if (!canonicalIri) return '';\n    if (canonicalIri.startsWith('_:')) return canonicalIri;\n    if (!rdfManager) throw new Error(`computeTermDisplay requires rdfManager to resolve '${canonicalIri}'`);\n    const td = computeTermDisplay(canonicalIri, rdfManager as any, (palette as any));\n    return (td.prefixed || td.short || '').replace(/^(https?:\\/\\/)?(www\\.)?/, '');\n  })",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/CustomOntologyNode.tsx:undefined:undefined"
      ]
    },
    {
      "name": "(ms as any).getRdfManager",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/FloatingEdge.tsx:undefined:undefined"
      ]
    },
    {
      "name": "file.text",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "payload.prefixes.slice",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "cfg.additionalOntologies.filter",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "(async () => {\n        try {\n          const store = mgr.getStore();\n          const quads = (store && typeof store.getQuads === \"function\") ? store.getQuads(null, null, null, null) : [];\n          if (!Array.isArray(quads) || quads.length === 0) return;\n\n          let diagram;\n          try {\n            diagram = mapQuadsToDiagram(quads, { predicateKind: predicateClassifier });\n          } catch (_) {\n            diagram = { nodes: [], edges: [] };\n          }\n          const mappedNodes: RFNode<NodeData>[] = (diagram && diagram.nodes) || [];\n          const mappedEdges: RFEdge<LinkData>[] = (diagram && diagram.edges) || [];\n\n          // Enrich nodes/edges similar to runMapping\n          let enrichedNodes = mappedNodes;\n          let enrichedEdges = mappedEdges;\n          try {\n            const propMap = new Map<string, any>();\n            try {\n              if (Array.isArray(availableProperties)) {\n                for (const p of availableProperties) {\n                  try {\n                    const iriKey = String((p && (p as any).iri) || \"\").trim();\n                    if (iriKey) propMap.set(iriKey, p);\n                  } catch (_) { /* ignore per-entry */ }\n                }\n              }\n            } catch (_) { /* ignore */ }\n\n            const mgrLocal = mgr;\n\n            enrichedNodes = (mappedNodes || []).map((n) => {\n              try {\n                const primary =\n                  Array.isArray(n.data?.rdfTypes) && n.data.rdfTypes.find((t: any) => t && !/NamedIndividual/i.test(String(t))) ||\n                  n.data?.classType ||\n                  n.data?.displayType ||\n                  undefined;\n                let td: any = undefined;\n                try {\n                  if (primary && mgrLocal) td = computeTermDisplay(String(primary), mgrLocal as any, palette, { availableProperties, availableClasses });\n                } catch (_) {\n                  td = undefined;\n                }\n                const paletteColor = td?.color || (td && td.namespace && palette ? (palette as any)[td.namespace] : undefined);\n                const displayPrefixed = td?.prefixed || (td && td.label) || n.data?.displayPrefixed || (n.data && (n.data.label || n.data.classType)) || undefined;\n                const displayShort = td?.short || n.data?.displayShort || undefined;\n                const updatedData = { ...(n.data as NodeData), classType: (td && td.iri) || n.data?.classType, namespace: td?.namespace || n.data?.namespace, displayPrefixed, displayShort, typeNamespace: td?.namespace || n.data?.typeNamespace, paletteColor, label: n.data?.label || td?.label } as NodeData;\n                return { ...n, data: updatedData } as RFNode<NodeData>;\n              } catch (_) {\n                return n;\n              }\n            });\n\n            enrichedEdges = (mappedEdges || []).map((e) => {\n              try {\n                const pred = String((e && e.data && ((e.data as any).propertyUri || (e.data as any).propertyType || (e.data as any).predicate)) || \"\");\n                let td: any = undefined;\n                try {\n                  if (pred && mgrLocal) td = computeTermDisplay(pred, mgrLocal as any, palette, { availableProperties });\n                } catch (_) {\n                  td = undefined;\n                }\n                const fromFat = propMap.get(pred);\n                const labelFromProps = fromFat && fromFat.label ? String(fromFat.label) : undefined;\n                const newLabel = labelFromProps || td?.label || td?.prefixed || td?.short || String(pred);\n                const newColor = td?.color || (td && td.namespace && palette ? (palette as any)[td.namespace] : undefined);\n                const updatedEdgeData = { ...(e.data as LinkData), label: newLabel, paletteColor: newColor } as LinkData;\n                return { ...e, data: updatedEdgeData } as RFEdge<LinkData>;\n              } catch (_) {\n                return e;\n              }\n            });\n          } catch (_) {\n            enrichedNodes = mappedNodes;\n            enrichedEdges = mappedEdges;\n          }\n\n          // Merge positions/runtime flags conservatively (preserve previous positions)\n          setNodes((prev) => {\n            try {\n              const prevById = new Map<string, RFNode<NodeData>>();\n              (prev || []).forEach((n) => prevById.set(String(n.id), n));\n              const merged = enrichedNodes.map((m) => {\n                const prevNode = prevById.get(String(m.id));\n                try {\n                  m.position = (prevNode && (prevNode.position as any)) || (m && (m as any).position) || { x: 0, y: 0 };\n                  if (prevNode) {\n                    if ((prevNode as any).__rf) (m as any).__rf = (prevNode as any).__rf;\n                    if ((prevNode as any).selected) (m as any).selected = true;\n                  }\n                } catch (_) {\n                  try { m.position = m && (m as any).position ? (m as any).position : { x: 0, y: 0 }; } catch (_) { /* ignore */ }\n                }\n                return m;\n              });\n              return merged;\n            } catch (_) {\n              return mappedNodes;\n            }\n          });\n\n          setEdges((prev) => {\n            try {\n              if (\n                Array.isArray(prev) &&\n                prev.length === enrichedEdges.length &&\n                prev.every((p, idx) => p.id === enrichedEdges[idx].id && p.source === enrichedEdges[idx].source && p.target === enrichedEdges[idx].target)\n              ) {\n                return prev;\n              }\n            } catch (_) { /* fall through */ }\n            return enrichedEdges;\n          });\n\n          // Force layout once after this fallback mapping so autoloaded ontologies are visible.\n          try {\n            loadTriggerRef.current = true;\n          } catch (_) {}\n          try {\n            const nodeIds = (Array.isArray(mappedNodes) ? mappedNodes.map((n) => String(n.id)) : []).sort().join(',');\n            const edgeIds = (Array.isArray(mappedEdges) ? mappedEdges.map((e) => String(e.id)) : []).sort().join(',');\n            const newStructFp = `N:${nodeIds}|E:${edgeIds}`;\n            if (lastLayoutFingerprintRef.current !== newStructFp) {\n              lastLayoutFingerprintRef.current = newStructFp;\n              try { void doLayout(mappedNodes, mappedEdges, true); } catch (_) {}\n            }\n          } catch (_) { /* ignore layout scheduling */ }\n        } catch (_) {\n          /* ignore overall fallback errors */\n        }\n      })",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "domain.includes",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "range.includes",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "found.forEach",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined"
      ]
    },
    {
      "name": "DataFactory.quad",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined"
      ]
    },
    {
      "name": "DataFactory.literal",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/KnowledgeCanvas.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined"
      ]
    },
    {
      "name": "this.diagram.setNodePositions",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/LayoutManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "this.diagram.nodes.map",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/LayoutManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "this.diagram.resetPositions",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/LayoutManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "this.diagram.getNodePositions",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/LayoutManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "this.diagram.applyLayout",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/LayoutManager.ts:undefined:undefined"
      ]
    },
    {
      "name": "(mgrState as any).getRdfManager",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/LinkPropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined"
      ]
    },
    {
      "name": "mgr.expandPrefix",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/LinkPropertyEditor.tsx:undefined:undefined",
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined"
      ]
    },
    {
      "name": "mgr.loadRDFIntoGraph",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/LinkPropertyEditor.tsx:undefined:undefined"
      ]
    },
    {
      "name": "mgr.loadRDF",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/LinkPropertyEditor.tsx:undefined:undefined"
      ]
    },
    {
      "name": "(mgr as any).notifyChange",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/LinkPropertyEditor.tsx:undefined:undefined"
      ]
    },
    {
      "name": "(() => {\n                // Prefer the canvas-provided nodes for display. Avoid any RDF store lookups.\n                const sIri = String(sourceNode?.iri ?? sourceNode?.key ?? '');\n                const tIri = String(targetNode?.iri ?? targetNode?.key ?? '');\n                const format = (iri: string) => {\n                  if (!iri) return '';\n                  if (iri.startsWith('_:')) return iri;\n                  return shortLocalName(iri).replace(/^(https?:\\/\\/)?(www\\.)?/, '');\n                };\n                const sDisplay = format(sIri);\n                const tDisplay = format(tIri);\n                return `${sDisplay} â†’ ${tDisplay}`;\n              })",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/LinkPropertyEditor.tsx:undefined:undefined"
      ]
    },
    {
      "name": "d.rdfTypes.slice",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined"
      ]
    },
    {
      "name": "(rdfTypes || []).find",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined"
      ]
    },
    {
      "name": "d.annotationProperties.forEach",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined"
      ]
    },
    {
      "name": "d.annotations.forEach",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined"
      ]
    },
    {
      "name": "e?.preventDefault",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined"
      ]
    },
    {
      "name": "e?.stopPropagation",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/NodePropertyEditor.tsx:undefined:undefined"
      ]
    },
    {
      "name": "e.preventDefault",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined"
      ]
    },
    {
      "name": "e.stopPropagation",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined"
      ]
    },
    {
      "name": "el.setPointerCapture",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined"
      ]
    },
    {
      "name": "(el as any).releasePointerCapture",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined"
      ]
    },
    {
      "name": "rdfManager.addNamespace",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/ResizableNamespaceLegend.tsx:undefined:undefined"
      ]
    },
    {
      "name": "(() => {\n    const q = String(inputValue || \"\").trim().toLowerCase();\n    if (!q) return options;\n    const labelMatches = options.filter((option) =>\n      String(option.label || \"\").toLowerCase().includes(q),\n    );\n    const valueMatches = options.filter(\n      (option) =>\n        String(option.value || \"\").toLowerCase().includes(q) &&\n        !labelMatches.some((m) => m.value === option.value),\n    );\n    const descMatches = options.filter(\n      (option) =>\n        !labelMatches.some((m) => m.value === option.value) &&\n        !valueMatches.some((m) => m.value === option.value) &&\n        String(option.description || \"\").toLowerCase().includes(q),\n    );\n    return [...labelMatches, ...valueMatches, ...descMatches];\n  })",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/AutoComplete.tsx:undefined:undefined"
      ]
    },
    {
      "name": "(() => {\n                const mgrState = useOntologyStore.getState();\n                const rdfMgr = typeof mgrState.getRdfManager === 'function' ? mgrState.getRdfManager() : mgrState.rdfManager;\n                const format = (iri?: string) => {\n                  if (!iri) return \"\";\n                  const s = String(iri);\n                  if (s.startsWith('_:')) return s;\n                  try {\n                    if (rdfMgr) {\n                      const td = computeTermDisplay(s, rdfMgr as any);\n                      const pref = (td.prefixed || td.short || '').replace(/^(https?:\\/\\/)?(www\\.)?/, '');\n                      // Preserve any leading ':' so autocomplete shows default-namespace entries as ':local'\n                      return pref;\n                    }\n                  } catch (_) { /* ignore */ }\n                  // Fallback: if rdfMgr exposes namespaces and the value belongs to the default namespace (empty prefix),\n                  // render with a leading ':' to match UI expectations in tests.\n                  try {\n                    const nsMap = rdfMgr && typeof (rdfMgr as any).getNamespaces === 'function'\n                      ? (rdfMgr as any).getNamespaces()\n                      : (rdfMgr && typeof rdfMgr === 'object' ? rdfMgr as Record<string,string> : undefined);\n                    if (nsMap && nsMap[''] && s.startsWith(String(nsMap['']))) {\n                      return `:${shortLocalName(s)}`.replace(/^(https?:\\/\\/)?(www\\.)?/, '');\n                    }\n                  } catch (_) { /* ignore */ }\n                  return shortLocalName(s).replace(/^(https?:\\/\\/)?(www\\.)?/, '');\n                };\n                if (selectedOption) return format(selectedOption.value);\n                if (value) return format(value);\n                return placeholder;\n              })",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/AutoComplete.tsx:undefined:undefined"
      ]
    },
    {
      "name": "(rdfMgr as any).getNamespaces",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/AutoComplete.tsx:undefined:undefined"
      ]
    },
    {
      "name": "(() => {\n                      const mgrState = useOntologyStore.getState();\n                      const rdfMgr = typeof mgrState.getRdfManager === 'function' ? mgrState.getRdfManager() : mgrState.rdfManager;\n                      try {\n                        if (rdfMgr) {\n                          const td = computeTermDisplay(String(option.value), rdfMgr as any);\n                          const pref = (td.prefixed || td.short || '').replace(/^(https?:\\/\\/)?(www\\.)?/, '');\n                          // Preserve leading ':' so options for the default namespace appear as ':local'\n                          return pref;\n                        }\n                      } catch (_) { /* ignore */ }\n                      // Fallback: if rdfMgr exposes namespaces and the value belongs to the default namespace (empty prefix),\n                      // render with a leading ':' so tests expecting ':local' succeed.\n                      try {\n                        const nsMap = rdfMgr && typeof (rdfMgr as any).getNamespaces === 'function'\n                          ? (rdfMgr as any).getNamespaces()\n                          : (rdfMgr && typeof rdfMgr === 'object' ? rdfMgr as Record<string,string> : undefined);\n                        if (nsMap && nsMap[''] && String(option.value).startsWith(String(nsMap['']))) {\n                          return `:${shortLocalName(String(option.value))}`.replace(/^(https?:\\/\\/)?(www\\.)?/, '');\n                        }\n                      } catch (_) { /* ignore */ }\n                      return shortLocalName(String(option.value)).replace(/^(https?:\\/\\/)?(www\\.)?/, '');\n                    })",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/AutoComplete.tsx:undefined:undefined"
      ]
    },
    {
      "name": "toasts.map",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/ui/toaster.tsx:undefined:undefined"
      ]
    },
    {
      "name": "(os as any).getRdfManager",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/core/edgeHelpers.ts:undefined:undefined"
      ]
    },
    {
      "name": "(mgr as any).getStore",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/core/edgeHelpers.ts:undefined:undefined"
      ]
    },
    {
      "name": "(store as any).add",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/core/edgeHelpers.ts:undefined:undefined"
      ]
    },
    {
      "name": "mgr.onChange",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined"
      ]
    },
    {
      "name": "mgr.offChange",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/core/namespacePalette.ts:undefined:undefined"
      ]
    },
    {
      "name": "(canonicalNode as any).types.map",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/core/nodeDisplay.ts:undefined:undefined"
      ]
    },
    {
      "name": "diagram.startTransaction",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/helpers/diagramHelpers.ts:undefined:undefined"
      ]
    },
    {
      "name": "diagram.nodes.each",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/helpers/diagramHelpers.ts:undefined:undefined"
      ]
    },
    {
      "name": "data.rdfTypes.some",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/helpers/diagramHelpers.ts:undefined:undefined"
      ]
    },
    {
      "name": "diagram.model.setDataProperty",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/helpers/diagramHelpers.ts:undefined:undefined"
      ]
    },
    {
      "name": "diagram.commitTransaction",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/helpers/diagramHelpers.ts:undefined:undefined"
      ]
    },
    {
      "name": "nd.rdfTypes.map(String).filter",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/helpers/diagramHelpers.ts:undefined:undefined"
      ]
    },
    {
      "name": "nd.rdfTypes.map",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/helpers/diagramHelpers.ts:undefined:undefined"
      ]
    },
    {
      "name": "badge.includes",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/helpers/diagramHelpers.ts:undefined:undefined"
      ]
    },
    {
      "name": "(ns || '').replace",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/helpers/diagramHelpers.ts:undefined:undefined"
      ]
    },
    {
      "name": "cg.nodes.find",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/helpers/graphMappingHelpers.ts:undefined:undefined"
      ]
    },
    {
      "name": "d.rdfTypes.filter",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/helpers/nodePropertyHelpers.ts:undefined:undefined"
      ]
    },
    {
      "name": "g.setGraph",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/layout/dagreLayout.ts:undefined:undefined"
      ]
    },
    {
      "name": "g.setDefaultEdgeLabel",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/layout/dagreLayout.ts:undefined:undefined"
      ]
    },
    {
      "name": "g.setNode",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/layout/dagreLayout.ts:undefined:undefined"
      ]
    },
    {
      "name": "g.setEdge",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/layout/dagreLayout.ts:undefined:undefined"
      ]
    },
    {
      "name": "dagre.layout",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/layout/dagreLayout.ts:undefined:undefined"
      ]
    },
    {
      "name": "g.nodes",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/layout/dagreLayout.ts:undefined:undefined"
      ]
    },
    {
      "name": "g.node",
      "definedIn": [
        "unknown"
      ],
      "role": "",
      "callSites": [
        "src/components/Canvas/layout/dagreLayout.ts:undefined:undefined"
      ]
    }
  ]
}