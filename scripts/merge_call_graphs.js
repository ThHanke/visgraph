#!/usr/bin/env node
/**
 * scripts/merge_call_graphs.js
 *
 * Merge docs/call_graph.generated.json into the autoGenerated section of docs/call_graph.json
 * - Reads docs/call_graph.generated.json
 * - Reads docs/call_graph.json (the curated/merged file)
 * - Replaces the `autoGenerated` section with the generated contents
 * - Updates `mergedAt` timestamp
 *
 * Usage:
 *   node scripts/merge_call_graphs.js
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const repoRoot = path.resolve(__dirname, '..');
const docsDir = path.join(repoRoot, 'docs');
const generatedPath = path.join(docsDir, 'call_graph.generated.json');
const mergedPath = path.join(docsDir, 'call_graph.json');

function readJSON(filePath) {
  if (!fs.existsSync(filePath)) {
    console.error('ERROR: file not found:', filePath);
    process.exit(2);
  }
  const raw = fs.readFileSync(filePath, 'utf8');
  try {
    return JSON.parse(raw);
  } catch (err) {
    console.error('ERROR: failed to parse JSON for', filePath, err.message);
    process.exit(3);
  }
}

function writeJSON(filePath, obj) {
  fs.writeFileSync(filePath, JSON.stringify(obj, null, 2) + '\n', 'utf8');
}

function main() {
  const generated = readJSON(generatedPath);
  const merged = readJSON(mergedPath);

  // Ensure merged is an object
  if (typeof merged !== 'object' || merged === null) {
    console.error('ERROR: docs/call_graph.json does not contain a JSON object at top-level');
    process.exit(4);
  }

  merged.autoGenerated = generated;
  merged.mergedAt = new Date().toISOString();

  writeJSON(mergedPath, merged);
  console.log('Merged generated call graph into', mergedPath);
  console.log('Generated file used:', generatedPath);
}

main();
